// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbAryAref calls `rb_ary_aref` in C
//
// Original definition is following
//
//	VALUE rb_ary_aref(int argc, const VALUE *argv, VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryAref(argc int, argv *VALUE, ary VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_ary_aref(C.int(argc), &cArgv, C.VALUE(ary)))
	*argv = VALUE(cArgv)
	return ret
}

// RbAryAssoc calls `rb_ary_assoc` in C
//
// Original definition is following
//
//	VALUE rb_ary_assoc(VALUE alist, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryAssoc(alist VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_ary_assoc(C.VALUE(alist), C.VALUE(key)))
	return ret
}

// RbAryCat calls `rb_ary_cat` in C
//
// Original definition is following
//
//	VALUE rb_ary_cat(VALUE ary, const VALUE *train, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryCat(ary VALUE, train *VALUE, len Long) VALUE {
	var cTrain C.VALUE
	ret := VALUE(C.rb_ary_cat(C.VALUE(ary), &cTrain, C.long(len)))
	*train = VALUE(cTrain)
	return ret
}

// RbAryClear calls `rb_ary_clear` in C
//
// Original definition is following
//
//	VALUE rb_ary_clear(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryClear(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_clear(C.VALUE(ary)))
	return ret
}

// RbAryCmp calls `rb_ary_cmp` in C
//
// Original definition is following
//
//	VALUE rb_ary_cmp(VALUE lhs, VALUE rhs)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryCmp(lhs VALUE, rhs VALUE) VALUE {
	ret := VALUE(C.rb_ary_cmp(C.VALUE(lhs), C.VALUE(rhs)))
	return ret
}

// RbAryConcat calls `rb_ary_concat` in C
//
// Original definition is following
//
//	VALUE rb_ary_concat(VALUE lhs, VALUE rhs)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryConcat(lhs VALUE, rhs VALUE) VALUE {
	ret := VALUE(C.rb_ary_concat(C.VALUE(lhs), C.VALUE(rhs)))
	return ret
}

// RbAryDelete calls `rb_ary_delete` in C
//
// Original definition is following
//
//	VALUE rb_ary_delete(VALUE ary, VALUE elem)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryDelete(ary VALUE, elem VALUE) VALUE {
	ret := VALUE(C.rb_ary_delete(C.VALUE(ary), C.VALUE(elem)))
	return ret
}

// RbAryDeleteAt calls `rb_ary_delete_at` in C
//
// Original definition is following
//
//	VALUE rb_ary_delete_at(VALUE ary, long pos)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryDeleteAt(ary VALUE, pos Long) VALUE {
	ret := VALUE(C.rb_ary_delete_at(C.VALUE(ary), C.long(pos)))
	return ret
}

// RbAryDup calls `rb_ary_dup` in C
//
// Original definition is following
//
//	VALUE rb_ary_dup(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryDup(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_dup(C.VALUE(ary)))
	return ret
}

// RbAryEach calls `rb_ary_each` in C
//
// Original definition is following
//
//	VALUE rb_ary_each(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryEach(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_each(C.VALUE(ary)))
	return ret
}

// RbAryFree calls `rb_ary_free` in C
//
// Original definition is following
//
//	void rb_ary_free(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryFree(ary VALUE) {
	C.rb_ary_free(C.VALUE(ary))
}

// RbAryFreeze calls `rb_ary_freeze` in C
//
// Original definition is following
//
//	VALUE rb_ary_freeze(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryFreeze(obj VALUE) VALUE {
	ret := VALUE(C.rb_ary_freeze(C.VALUE(obj)))
	return ret
}

// RbAryHiddenNew calls `rb_ary_hidden_new` in C
//
// Original definition is following
//
//	VALUE rb_ary_hidden_new(long capa)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryHiddenNew(capa Long) VALUE {
	ret := VALUE(C.rb_ary_hidden_new(C.long(capa)))
	return ret
}

// RbAryIncludes calls `rb_ary_includes` in C
//
// Original definition is following
//
//	VALUE rb_ary_includes(VALUE ary, VALUE elem)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryIncludes(ary VALUE, elem VALUE) VALUE {
	ret := VALUE(C.rb_ary_includes(C.VALUE(ary), C.VALUE(elem)))
	return ret
}

// RbAryJoin calls `rb_ary_join` in C
//
// Original definition is following
//
//	VALUE rb_ary_join(VALUE ary, VALUE sep)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryJoin(ary VALUE, sep VALUE) VALUE {
	ret := VALUE(C.rb_ary_join(C.VALUE(ary), C.VALUE(sep)))
	return ret
}

// RbAryModify calls `rb_ary_modify` in C
//
// Original definition is following
//
//	void rb_ary_modify(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryModify(ary VALUE) {
	C.rb_ary_modify(C.VALUE(ary))
}

// RbAryNew calls `rb_ary_new` in C
//
// Original definition is following
//
//	VALUE rb_ary_new(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryNew() VALUE {
	ret := VALUE(C.rb_ary_new())
	return ret
}

// RbAryNewCapa calls `rb_ary_new_capa` in C
//
// Original definition is following
//
//	VALUE rb_ary_new_capa(long capa)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryNewCapa(capa Long) VALUE {
	ret := VALUE(C.rb_ary_new_capa(C.long(capa)))
	return ret
}

// RbAryNewFromValues calls `rb_ary_new_from_values` in C
//
// Original definition is following
//
//	VALUE rb_ary_new_from_values(long n, const VALUE *elts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryNewFromValues(n Long, elts *VALUE) VALUE {
	var cElts C.VALUE
	ret := VALUE(C.rb_ary_new_from_values(C.long(n), &cElts))
	*elts = VALUE(cElts)
	return ret
}

// RbAryPlus calls `rb_ary_plus` in C
//
// Original definition is following
//
//	VALUE rb_ary_plus(VALUE lhs, VALUE rhs)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryPlus(lhs VALUE, rhs VALUE) VALUE {
	ret := VALUE(C.rb_ary_plus(C.VALUE(lhs), C.VALUE(rhs)))
	return ret
}

// RbAryPop calls `rb_ary_pop` in C
//
// Original definition is following
//
//	VALUE rb_ary_pop(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryPop(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_pop(C.VALUE(ary)))
	return ret
}

// RbAryPush calls `rb_ary_push` in C
//
// Original definition is following
//
//	VALUE rb_ary_push(VALUE ary, VALUE elem)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryPush(ary VALUE, elem VALUE) VALUE {
	ret := VALUE(C.rb_ary_push(C.VALUE(ary), C.VALUE(elem)))
	return ret
}

// RbAryRassoc calls `rb_ary_rassoc` in C
//
// Original definition is following
//
//	VALUE rb_ary_rassoc(VALUE alist, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryRassoc(alist VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_ary_rassoc(C.VALUE(alist), C.VALUE(key)))
	return ret
}

// RbAryReplace calls `rb_ary_replace` in C
//
// Original definition is following
//
//	VALUE rb_ary_replace(VALUE copy, VALUE orig)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryReplace(copy VALUE, orig VALUE) VALUE {
	ret := VALUE(C.rb_ary_replace(C.VALUE(copy), C.VALUE(orig)))
	return ret
}

// RbAryResize calls `rb_ary_resize` in C
//
// Original definition is following
//
//	VALUE rb_ary_resize(VALUE ary, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryResize(ary VALUE, len Long) VALUE {
	ret := VALUE(C.rb_ary_resize(C.VALUE(ary), C.long(len)))
	return ret
}

// RbAryResurrect calls `rb_ary_resurrect` in C
//
// Original definition is following
//
//	VALUE rb_ary_resurrect(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryResurrect(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_resurrect(C.VALUE(ary)))
	return ret
}

// RbAryReverse calls `rb_ary_reverse` in C
//
// Original definition is following
//
//	VALUE rb_ary_reverse(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryReverse(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_reverse(C.VALUE(ary)))
	return ret
}

// RbAryRotate calls `rb_ary_rotate` in C
//
// Original definition is following
//
//	VALUE rb_ary_rotate(VALUE ary, long rot)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryRotate(ary VALUE, rot Long) VALUE {
	ret := VALUE(C.rb_ary_rotate(C.VALUE(ary), C.long(rot)))
	return ret
}

// RbAryShift calls `rb_ary_shift` in C
//
// Original definition is following
//
//	VALUE rb_ary_shift(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryShift(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_shift(C.VALUE(ary)))
	return ret
}

// RbArySort calls `rb_ary_sort` in C
//
// Original definition is following
//
//	VALUE rb_ary_sort(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbArySort(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_sort(C.VALUE(ary)))
	return ret
}

// RbArySortBang calls `rb_ary_sort_bang` in C
//
// Original definition is following
//
//	VALUE rb_ary_sort_bang(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbArySortBang(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_sort_bang(C.VALUE(ary)))
	return ret
}

// RbAryStore calls `rb_ary_store` in C
//
// Original definition is following
//
//	void rb_ary_store(VALUE ary, long key, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryStore(ary VALUE, key Long, val VALUE) {
	C.rb_ary_store(C.VALUE(ary), C.long(key), C.VALUE(val))
}

// RbArySubseq calls `rb_ary_subseq` in C
//
// Original definition is following
//
//	VALUE rb_ary_subseq(VALUE ary, long beg, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbArySubseq(ary VALUE, beg Long, len Long) VALUE {
	ret := VALUE(C.rb_ary_subseq(C.VALUE(ary), C.long(beg), C.long(len)))
	return ret
}

// RbAryToAry calls `rb_ary_to_ary` in C
//
// Original definition is following
//
//	VALUE rb_ary_to_ary(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryToAry(obj VALUE) VALUE {
	ret := VALUE(C.rb_ary_to_ary(C.VALUE(obj)))
	return ret
}

// RbAryToS calls `rb_ary_to_s` in C
//
// Original definition is following
//
//	VALUE rb_ary_to_s(VALUE ary)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryToS(ary VALUE) VALUE {
	ret := VALUE(C.rb_ary_to_s(C.VALUE(ary)))
	return ret
}

// RbAryUnshift calls `rb_ary_unshift` in C
//
// Original definition is following
//
//	VALUE rb_ary_unshift(VALUE ary, VALUE elem)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAryUnshift(ary VALUE, elem VALUE) VALUE {
	ret := VALUE(C.rb_ary_unshift(C.VALUE(ary), C.VALUE(elem)))
	return ret
}

// RbAssocNew calls `rb_assoc_new` in C
//
// Original definition is following
//
//	VALUE rb_assoc_new(VALUE car, VALUE cdr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbAssocNew(car VALUE, cdr VALUE) VALUE {
	ret := VALUE(C.rb_assoc_new(C.VALUE(car), C.VALUE(cdr)))
	return ret
}

// RbCheckArrayType calls `rb_check_array_type` in C
//
// Original definition is following
//
//	VALUE rb_check_array_type(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbCheckArrayType(obj VALUE) VALUE {
	ret := VALUE(C.rb_check_array_type(C.VALUE(obj)))
	return ret
}

// RbGetValuesAt calls `rb_get_values_at` in C
//
// Original definition is following
//
//	VALUE rb_get_values_at(VALUE obj, long olen, int argc, const VALUE *argv, VALUE (*func)(VALUE obj, long oidx))
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/array.h
func RbGetValuesAt(obj VALUE, olen Long, argc int, argv *VALUE, arg5 unsafe.Pointer) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_get_values_at(C.VALUE(obj), C.long(olen), C.int(argc), &cArgv, toCPointer(arg5)))
	*argv = VALUE(cArgv)
	return ret
}
