// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbNativethreadCondT is a type for passing `C.rb_nativethread_cond_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
type RbNativethreadCondT C.rb_nativethread_cond_t

// RbNativethreadIdT is a type for passing `C.rb_nativethread_id_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
type RbNativethreadIdT C.rb_nativethread_id_t

// RbNativethreadLockT is a type for passing `C.rb_nativethread_lock_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
type RbNativethreadLockT C.rb_nativethread_lock_t

// RbThreadCondStruct is a type for passing `C.rb_thread_cond_struct` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
type RbThreadCondStruct C.rb_thread_cond_struct

// RbNativeCondBroadcast calls `rb_native_cond_broadcast` in C
//
// Original definition is following
//
//	void rb_native_cond_broadcast(rb_nativethread_cond_t *cond)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondBroadcast(cond *RbNativethreadCondT) {
	var cCond C.rb_nativethread_cond_t
	C.rb_native_cond_broadcast(&cCond)
	*cond = RbNativethreadCondT(cCond)
}

// RbNativeCondDestroy calls `rb_native_cond_destroy` in C
//
// Original definition is following
//
//	void rb_native_cond_destroy(rb_nativethread_cond_t *cond)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondDestroy(cond *RbNativethreadCondT) {
	var cCond C.rb_nativethread_cond_t
	C.rb_native_cond_destroy(&cCond)
	*cond = RbNativethreadCondT(cCond)
}

// RbNativeCondInitialize calls `rb_native_cond_initialize` in C
//
// Original definition is following
//
//	void rb_native_cond_initialize(rb_nativethread_cond_t *cond)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondInitialize(cond *RbNativethreadCondT) {
	var cCond C.rb_nativethread_cond_t
	C.rb_native_cond_initialize(&cCond)
	*cond = RbNativethreadCondT(cCond)
}

// RbNativeCondSignal calls `rb_native_cond_signal` in C
//
// Original definition is following
//
//	void rb_native_cond_signal(rb_nativethread_cond_t *cond)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondSignal(cond *RbNativethreadCondT) {
	var cCond C.rb_nativethread_cond_t
	C.rb_native_cond_signal(&cCond)
	*cond = RbNativethreadCondT(cCond)
}

// RbNativeCondTimedwait calls `rb_native_cond_timedwait` in C
//
// Original definition is following
//
//	void rb_native_cond_timedwait(rb_nativethread_cond_t *cond, rb_nativethread_lock_t *mutex, unsigned long msec)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondTimedwait(cond *RbNativethreadCondT, mutex *RbNativethreadLockT, msec uint) {
	var cCond C.rb_nativethread_cond_t
	var cMutex C.rb_nativethread_lock_t
	C.rb_native_cond_timedwait(&cCond, &cMutex, C.ulong(msec))
	*cond = RbNativethreadCondT(cCond)
	*mutex = RbNativethreadLockT(cMutex)
}

// RbNativeCondWait calls `rb_native_cond_wait` in C
//
// Original definition is following
//
//	void rb_native_cond_wait(rb_nativethread_cond_t *cond, rb_nativethread_lock_t *mutex)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeCondWait(cond *RbNativethreadCondT, mutex *RbNativethreadLockT) {
	var cCond C.rb_nativethread_cond_t
	var cMutex C.rb_nativethread_lock_t
	C.rb_native_cond_wait(&cCond, &cMutex)
	*cond = RbNativethreadCondT(cCond)
	*mutex = RbNativethreadLockT(cMutex)
}

// RbNativeMutexDestroy calls `rb_native_mutex_destroy` in C
//
// Original definition is following
//
//	void rb_native_mutex_destroy(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeMutexDestroy(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_native_mutex_destroy(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativeMutexInitialize calls `rb_native_mutex_initialize` in C
//
// Original definition is following
//
//	void rb_native_mutex_initialize(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeMutexInitialize(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_native_mutex_initialize(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativeMutexLock calls `rb_native_mutex_lock` in C
//
// Original definition is following
//
//	void rb_native_mutex_lock(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeMutexLock(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_native_mutex_lock(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativeMutexTrylock calls `rb_native_mutex_trylock` in C
//
// Original definition is following
//
//	int  rb_native_mutex_trylock(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeMutexTrylock(lock *RbNativethreadLockT) int {
	var cLock C.rb_nativethread_lock_t
	ret := int(C.rb_native_mutex_trylock(&cLock))
	*lock = RbNativethreadLockT(cLock)
	return ret
}

// RbNativeMutexUnlock calls `rb_native_mutex_unlock` in C
//
// Original definition is following
//
//	void rb_native_mutex_unlock(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativeMutexUnlock(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_native_mutex_unlock(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativethreadLockDestroy calls `rb_nativethread_lock_destroy` in C
//
// Original definition is following
//
//	void rb_nativethread_lock_destroy(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativethreadLockDestroy(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_nativethread_lock_destroy(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativethreadLockInitialize calls `rb_nativethread_lock_initialize` in C
//
// Original definition is following
//
//	void rb_nativethread_lock_initialize(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativethreadLockInitialize(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_nativethread_lock_initialize(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativethreadLockLock calls `rb_nativethread_lock_lock` in C
//
// Original definition is following
//
//	void rb_nativethread_lock_lock(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativethreadLockLock(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_nativethread_lock_lock(&cLock)
	*lock = RbNativethreadLockT(cLock)
}

// RbNativethreadLockUnlock calls `rb_nativethread_lock_unlock` in C
//
// Original definition is following
//
//	void rb_nativethread_lock_unlock(rb_nativethread_lock_t *lock)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/thread_native.h
func RbNativethreadLockUnlock(lock *RbNativethreadLockT) {
	var cLock C.rb_nativethread_lock_t
	C.rb_nativethread_lock_unlock(&cLock)
	*lock = RbNativethreadLockT(cLock)
}
