// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbGvarGetterT is a type for passing `C.rb_gvar_getter_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
type RbGvarGetterT C.rb_gvar_getter_t

// RbGvarMarkerT is a type for passing `C.rb_gvar_marker_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
type RbGvarMarkerT C.rb_gvar_marker_t

// RbGvarSetterT is a type for passing `C.rb_gvar_setter_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
type RbGvarSetterT C.rb_gvar_setter_t

// RbDefineConst calls `rb_define_const` in C
//
// Original definition is following
//
//	void rb_define_const(VALUE klass, const char *name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineConst(klass VALUE, name string, val VALUE) {
	char, clean := string2Char(name)
	defer clean()

	C.rb_define_const(C.VALUE(klass), char, C.VALUE(val))
}

// RbDefineGlobalConst calls `rb_define_global_const` in C
//
// Original definition is following
//
//	void rb_define_global_const(const char *name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineGlobalConst(name string, val VALUE) {
	char, clean := string2Char(name)
	defer clean()

	C.rb_define_global_const(char, C.VALUE(val))
}

// RbDefineHookedVariable calls `rb_define_hooked_variable` in C
//
// Original definition is following
//
//	void rb_define_hooked_variable(const char *name, VALUE *var, rb_gvar_getter_t *getter, rb_gvar_setter_t *setter)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineHookedVariable(name string, v *VALUE, getter *RbGvarGetterT, setter *RbGvarSetterT) {
	char, clean := string2Char(name)
	defer clean()

	var cV C.VALUE
	var cGetter C.rb_gvar_getter_t
	var cSetter C.rb_gvar_setter_t
	C.rb_define_hooked_variable(char, &cV, &cGetter, &cSetter)
	*v = VALUE(cV)
	*getter = RbGvarGetterT(cGetter)
	*setter = RbGvarSetterT(cSetter)
}

// RbDefineReadonlyVariable calls `rb_define_readonly_variable` in C
//
// Original definition is following
//
//	void rb_define_readonly_variable(const char *name, const VALUE *var)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineReadonlyVariable(name string, v *VALUE) {
	char, clean := string2Char(name)
	defer clean()

	var cV C.VALUE
	C.rb_define_readonly_variable(char, &cV)
	*v = VALUE(cV)
}

// RbDefineVariable calls `rb_define_variable` in C
//
// Original definition is following
//
//	void rb_define_variable(const char *name, VALUE *var)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineVariable(name string, v *VALUE) {
	char, clean := string2Char(name)
	defer clean()

	var cV C.VALUE
	C.rb_define_variable(char, &cV)
	*v = VALUE(cV)
}

// RbDefineVirtualVariable calls `rb_define_virtual_variable` in C
//
// Original definition is following
//
//	void rb_define_virtual_variable(const char *name, rb_gvar_getter_t *getter, rb_gvar_setter_t *setter)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDefineVirtualVariable(name string, getter *RbGvarGetterT, setter *RbGvarSetterT) {
	char, clean := string2Char(name)
	defer clean()

	var cGetter C.rb_gvar_getter_t
	var cSetter C.rb_gvar_setter_t
	C.rb_define_virtual_variable(char, &cGetter, &cSetter)
	*getter = RbGvarGetterT(cGetter)
	*setter = RbGvarSetterT(cSetter)
}

// RbDeprecateConstant calls `rb_deprecate_constant` in C
//
// Original definition is following
//
//	void rb_deprecate_constant(VALUE mod, const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbDeprecateConstant(mod VALUE, name string) {
	char, clean := string2Char(name)
	defer clean()

	C.rb_deprecate_constant(C.VALUE(mod), char)
}

// RbGvGet calls `rb_gv_get` in C
//
// Original definition is following
//
//	VALUE rb_gv_get(const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbGvGet(name string) VALUE {
	char, clean := string2Char(name)
	defer clean()

	ret := VALUE(C.rb_gv_get(char))
	return ret
}

// RbGvSet calls `rb_gv_set` in C
//
// Original definition is following
//
//	VALUE rb_gv_set(const char *name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbGvSet(name string, val VALUE) VALUE {
	char, clean := string2Char(name)
	defer clean()

	ret := VALUE(C.rb_gv_set(char, C.VALUE(val)))
	return ret
}

// RbIvGet calls `rb_iv_get` in C
//
// Original definition is following
//
//	VALUE rb_iv_get(VALUE obj, const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbIvGet(obj VALUE, name string) VALUE {
	char, clean := string2Char(name)
	defer clean()

	ret := VALUE(C.rb_iv_get(C.VALUE(obj), char))
	return ret
}

// RbIvSet calls `rb_iv_set` in C
//
// Original definition is following
//
//	VALUE rb_iv_set(VALUE obj, const char *name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/variable.h
func RbIvSet(obj VALUE, name string, val VALUE) VALUE {
	char, clean := string2Char(name)
	defer clean()

	ret := VALUE(C.rb_iv_set(C.VALUE(obj), char, C.VALUE(val)))
	return ret
}
