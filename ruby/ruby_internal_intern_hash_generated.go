// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbHashUpdateFunc is a type for passing `C.rb_hash_update_func` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
type RbHashUpdateFunc C.rb_hash_update_func

// RbCheckHashType calls `rb_check_hash_type` in C
//
// Original definition is following
//
//	VALUE rb_check_hash_type(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbCheckHashType(obj VALUE) VALUE {
	ret := VALUE(C.rb_check_hash_type(C.VALUE(obj)))
	return ret
}

// RbEnvClear calls `rb_env_clear` in C
//
// Original definition is following
//
//	VALUE rb_env_clear(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbEnvClear() VALUE {
	ret := VALUE(C.rb_env_clear())
	return ret
}

// RbHash calls `rb_hash` in C
//
// Original definition is following
//
//	VALUE rb_hash(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHash(obj VALUE) VALUE {
	ret := VALUE(C.rb_hash(C.VALUE(obj)))
	return ret
}

// RbHashAref calls `rb_hash_aref` in C
//
// Original definition is following
//
//	VALUE rb_hash_aref(VALUE hash, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashAref(hash VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_hash_aref(C.VALUE(hash), C.VALUE(key)))
	return ret
}

// RbHashAset calls `rb_hash_aset` in C
//
// Original definition is following
//
//	VALUE rb_hash_aset(VALUE hash, VALUE key, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashAset(hash VALUE, key VALUE, val VALUE) VALUE {
	ret := VALUE(C.rb_hash_aset(C.VALUE(hash), C.VALUE(key), C.VALUE(val)))
	return ret
}

// RbHashBulkInsert calls `rb_hash_bulk_insert` in C
//
// Original definition is following
//
//	void rb_hash_bulk_insert(long argc, const VALUE *argv, VALUE hash)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashBulkInsert(argc Long, argv *VALUE, hash VALUE) {
	var cArgv C.VALUE
	C.rb_hash_bulk_insert(C.long(argc), &cArgv, C.VALUE(hash))
	*argv = VALUE(cArgv)
}

// RbHashClear calls `rb_hash_clear` in C
//
// Original definition is following
//
//	VALUE rb_hash_clear(VALUE hash)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashClear(hash VALUE) VALUE {
	ret := VALUE(C.rb_hash_clear(C.VALUE(hash)))
	return ret
}

// RbHashDelete calls `rb_hash_delete` in C
//
// Original definition is following
//
//	VALUE rb_hash_delete(VALUE hash, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashDelete(hash VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_hash_delete(C.VALUE(hash), C.VALUE(key)))
	return ret
}

// RbHashDeleteIf calls `rb_hash_delete_if` in C
//
// Original definition is following
//
//	VALUE rb_hash_delete_if(VALUE hash)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashDeleteIf(hash VALUE) VALUE {
	ret := VALUE(C.rb_hash_delete_if(C.VALUE(hash)))
	return ret
}

// RbHashDup calls `rb_hash_dup` in C
//
// Original definition is following
//
//	VALUE rb_hash_dup(VALUE hash)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashDup(hash VALUE) VALUE {
	ret := VALUE(C.rb_hash_dup(C.VALUE(hash)))
	return ret
}

// RbHashFetch calls `rb_hash_fetch` in C
//
// Original definition is following
//
//	VALUE rb_hash_fetch(VALUE hash, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashFetch(hash VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_hash_fetch(C.VALUE(hash), C.VALUE(key)))
	return ret
}

// RbHashForeach calls `rb_hash_foreach` in C
//
// Original definition is following
//
//	void rb_hash_foreach(VALUE hash, int (*func)(VALUE key, VALUE val, VALUE arg), VALUE arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashForeach(hash VALUE, arg2 unsafe.Pointer, arg VALUE) {
	C.rb_hash_foreach(C.VALUE(hash), toCPointer(arg2), C.VALUE(arg))
}

// RbHashFreeze calls `rb_hash_freeze` in C
//
// Original definition is following
//
//	VALUE rb_hash_freeze(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashFreeze(obj VALUE) VALUE {
	ret := VALUE(C.rb_hash_freeze(C.VALUE(obj)))
	return ret
}

// RbHashLookup calls `rb_hash_lookup` in C
//
// Original definition is following
//
//	VALUE rb_hash_lookup(VALUE hash, VALUE key)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashLookup(hash VALUE, key VALUE) VALUE {
	ret := VALUE(C.rb_hash_lookup(C.VALUE(hash), C.VALUE(key)))
	return ret
}

// RbHashLookup2 calls `rb_hash_lookup2` in C
//
// Original definition is following
//
//	VALUE rb_hash_lookup2(VALUE hash, VALUE key, VALUE def)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashLookup2(hash VALUE, key VALUE, def VALUE) VALUE {
	ret := VALUE(C.rb_hash_lookup2(C.VALUE(hash), C.VALUE(key), C.VALUE(def)))
	return ret
}

// RbHashNew calls `rb_hash_new` in C
//
// Original definition is following
//
//	VALUE rb_hash_new(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashNew() VALUE {
	ret := VALUE(C.rb_hash_new())
	return ret
}

// RbHashNewCapa calls `rb_hash_new_capa` in C
//
// Original definition is following
//
//	VALUE rb_hash_new_capa(long capa)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashNewCapa(capa Long) VALUE {
	ret := VALUE(C.rb_hash_new_capa(C.long(capa)))
	return ret
}

// RbHashSize calls `rb_hash_size` in C
//
// Original definition is following
//
//	VALUE rb_hash_size(VALUE hash)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashSize(hash VALUE) VALUE {
	ret := VALUE(C.rb_hash_size(C.VALUE(hash)))
	return ret
}

// RbHashUpdateBy calls `rb_hash_update_by` in C
//
// Original definition is following
//
//	VALUE rb_hash_update_by(VALUE hash1, VALUE hash2, rb_hash_update_func *func)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbHashUpdateBy(hash1 VALUE, hash2 VALUE, fun *RbHashUpdateFunc) VALUE {
	var cFun C.rb_hash_update_func
	ret := VALUE(C.rb_hash_update_by(C.VALUE(hash1), C.VALUE(hash2), &cFun))
	*fun = RbHashUpdateFunc(cFun)
	return ret
}

// RbPathCheck calls `rb_path_check` in C
//
// Original definition is following
//
//	int rb_path_check(const char *path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbPathCheck(path string) int {
	char, clean := string2Char(path)
	defer clean()

	ret := int(C.rb_path_check(char))
	return ret
}

// RbStForeachSafe calls `rb_st_foreach_safe` in C
//
// Original definition is following
//
//	void rb_st_foreach_safe(struct st_table *st, st_foreach_callback_func *func, st_data_t arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/hash.h
func RbStForeachSafe(st *StTable, fun *StForeachCallbackFunc, arg StDataT) {
	var cSt C.st_table
	var cFun C.st_foreach_callback_func
	C.rb_st_foreach_safe(&cSt, &cFun, C.st_data_t(arg))
	*st = StTable(cSt)
	*fun = StForeachCallbackFunc(cFun)
}
