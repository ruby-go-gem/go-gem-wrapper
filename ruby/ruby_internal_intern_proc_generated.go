// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbBindingNew calls `rb_binding_new` in C
//
// Original definition is following
//
//	VALUE rb_binding_new(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbBindingNew() VALUE {
	ret := VALUE(C.rb_binding_new())
	return ret
}

// RbBlockLambda calls `rb_block_lambda` in C
//
// Original definition is following
//
//	VALUE rb_block_lambda(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbBlockLambda() VALUE {
	ret := VALUE(C.rb_block_lambda())
	return ret
}

// RbMethodCall calls `rb_method_call` in C
//
// Original definition is following
//
//	VALUE rb_method_call(int argc, const VALUE *argv, VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbMethodCall(argc int, argv *VALUE, recv VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_method_call(C.int(argc), &cArgv, C.VALUE(recv)))
	*argv = VALUE(cArgv)
	return ret
}

// RbMethodCallKw calls `rb_method_call_kw` in C
//
// Original definition is following
//
//	VALUE rb_method_call_kw(int argc, const VALUE *argv, VALUE recv, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbMethodCallKw(argc int, argv *VALUE, recv VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_method_call_kw(C.int(argc), &cArgv, C.VALUE(recv), C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbMethodCallWithBlock calls `rb_method_call_with_block` in C
//
// Original definition is following
//
//	VALUE rb_method_call_with_block(int argc, const VALUE *argv, VALUE recv, VALUE proc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbMethodCallWithBlock(argc int, argv *VALUE, recv VALUE, proc VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_method_call_with_block(C.int(argc), &cArgv, C.VALUE(recv), C.VALUE(proc)))
	*argv = VALUE(cArgv)
	return ret
}

// RbMethodCallWithBlockKw calls `rb_method_call_with_block_kw` in C
//
// Original definition is following
//
//	VALUE rb_method_call_with_block_kw(int argc, const VALUE *argv, VALUE recv, VALUE proc, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbMethodCallWithBlockKw(argc int, argv *VALUE, recv VALUE, proc VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_method_call_with_block_kw(C.int(argc), &cArgv, C.VALUE(recv), C.VALUE(proc), C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbModMethodArity calls `rb_mod_method_arity` in C
//
// Original definition is following
//
//	int rb_mod_method_arity(VALUE mod, ID mid)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbModMethodArity(mod VALUE, mid ID) int {
	ret := int(C.rb_mod_method_arity(C.VALUE(mod), C.ID(mid)))
	return ret
}

// RbObjIsMethod calls `rb_obj_is_method` in C
//
// Original definition is following
//
//	VALUE rb_obj_is_method(VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbObjIsMethod(recv VALUE) VALUE {
	ret := VALUE(C.rb_obj_is_method(C.VALUE(recv)))
	return ret
}

// RbObjIsProc calls `rb_obj_is_proc` in C
//
// Original definition is following
//
//	VALUE rb_obj_is_proc(VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbObjIsProc(recv VALUE) VALUE {
	ret := VALUE(C.rb_obj_is_proc(C.VALUE(recv)))
	return ret
}

// RbObjMethod calls `rb_obj_method` in C
//
// Original definition is following
//
//	VALUE rb_obj_method(VALUE recv, VALUE mid)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbObjMethod(recv VALUE, mid VALUE) VALUE {
	ret := VALUE(C.rb_obj_method(C.VALUE(recv), C.VALUE(mid)))
	return ret
}

// RbObjMethodArity calls `rb_obj_method_arity` in C
//
// Original definition is following
//
//	int rb_obj_method_arity(VALUE obj, ID mid)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbObjMethodArity(obj VALUE, mid ID) int {
	ret := int(C.rb_obj_method_arity(C.VALUE(obj), C.ID(mid)))
	return ret
}

// RbProcArity calls `rb_proc_arity` in C
//
// Original definition is following
//
//	int rb_proc_arity(VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcArity(recv VALUE) int {
	ret := int(C.rb_proc_arity(C.VALUE(recv)))
	return ret
}

// RbProcCall calls `rb_proc_call` in C
//
// Original definition is following
//
//	VALUE rb_proc_call(VALUE recv, VALUE args)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcCall(recv VALUE, args VALUE) VALUE {
	ret := VALUE(C.rb_proc_call(C.VALUE(recv), C.VALUE(args)))
	return ret
}

// RbProcCallKw calls `rb_proc_call_kw` in C
//
// Original definition is following
//
//	VALUE rb_proc_call_kw(VALUE recv, VALUE args, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcCallKw(recv VALUE, args VALUE, kw_splat int) VALUE {
	ret := VALUE(C.rb_proc_call_kw(C.VALUE(recv), C.VALUE(args), C.int(kw_splat)))
	return ret
}

// RbProcCallWithBlock calls `rb_proc_call_with_block` in C
//
// Original definition is following
//
//	VALUE rb_proc_call_with_block(VALUE recv, int argc, const VALUE *argv, VALUE proc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcCallWithBlock(recv VALUE, argc int, argv *VALUE, proc VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_proc_call_with_block(C.VALUE(recv), C.int(argc), &cArgv, C.VALUE(proc)))
	*argv = VALUE(cArgv)
	return ret
}

// RbProcCallWithBlockKw calls `rb_proc_call_with_block_kw` in C
//
// Original definition is following
//
//	VALUE rb_proc_call_with_block_kw(VALUE recv, int argc, const VALUE *argv, VALUE proc, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcCallWithBlockKw(recv VALUE, argc int, argv *VALUE, proc VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_proc_call_with_block_kw(C.VALUE(recv), C.int(argc), &cArgv, C.VALUE(proc), C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbProcLambdaP calls `rb_proc_lambda_p` in C
//
// Original definition is following
//
//	VALUE rb_proc_lambda_p(VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcLambdaP(recv VALUE) VALUE {
	ret := VALUE(C.rb_proc_lambda_p(C.VALUE(recv)))
	return ret
}

// RbProcNew calls `rb_proc_new` in C
//
// Original definition is following
//
//	VALUE rb_proc_new(rb_block_call_func_t func, VALUE callback_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProcNew(fun RbBlockCallFuncT, callback_arg VALUE) VALUE {
	ret := VALUE(C.rb_proc_new(C.rb_block_call_func_t(fun), C.VALUE(callback_arg)))
	return ret
}

// RbProtect calls `rb_protect` in C
//
// Original definition is following
//
//	VALUE rb_protect(VALUE (*func)(VALUE args), VALUE args, int *state)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/proc.h
func RbProtect(arg1 unsafe.Pointer, args VALUE, state *int) VALUE {
	var cState C.int
	ret := VALUE(C.rb_protect(toCPointer(arg1), C.VALUE(args), &cState))
	*state = int(cState)
	return ret
}
