// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbDefineFinalizer calls `rb_define_finalizer` in C
//
// Original definition is following
//
//	VALUE rb_define_finalizer(VALUE obj, VALUE block)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbDefineFinalizer(obj VALUE, block VALUE) VALUE {
	ret := VALUE(C.rb_define_finalizer(C.VALUE(obj), C.VALUE(block)))
	return ret
}

// RbGc calls `rb_gc` in C
//
// Original definition is following
//
//	void rb_gc(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGc() {
	C.rb_gc()
}

// RbGcAdjustMemoryUsage calls `rb_gc_adjust_memory_usage` in C
//
// Original definition is following
//
//	void rb_gc_adjust_memory_usage(ssize_t diff)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcAdjustMemoryUsage(diff SsizeT) {
	C.rb_gc_adjust_memory_usage(C.ssize_t(diff))
}

// RbGcCopyFinalizer calls `rb_gc_copy_finalizer` in C
//
// Original definition is following
//
//	void rb_gc_copy_finalizer(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcCopyFinalizer(dst VALUE, src VALUE) {
	C.rb_gc_copy_finalizer(C.VALUE(dst), C.VALUE(src))
}

// RbGcCount calls `rb_gc_count` in C
//
// Original definition is following
//
//	size_t rb_gc_count(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcCount() SizeT {
	ret := SizeT(C.rb_gc_count())
	return ret
}

// RbGcDisable calls `rb_gc_disable` in C
//
// Original definition is following
//
//	VALUE rb_gc_disable(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcDisable() VALUE {
	ret := VALUE(C.rb_gc_disable())
	return ret
}

// RbGcEnable calls `rb_gc_enable` in C
//
// Original definition is following
//
//	VALUE rb_gc_enable(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcEnable() VALUE {
	ret := VALUE(C.rb_gc_enable())
	return ret
}

// RbGcLatestGcInfo calls `rb_gc_latest_gc_info` in C
//
// Original definition is following
//
//	VALUE rb_gc_latest_gc_info(VALUE key_or_buf)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcLatestGcInfo(key_or_buf VALUE) VALUE {
	ret := VALUE(C.rb_gc_latest_gc_info(C.VALUE(key_or_buf)))
	return ret
}

// RbGcLocation calls `rb_gc_location` in C
//
// Original definition is following
//
//	VALUE rb_gc_location(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcLocation(obj VALUE) VALUE {
	ret := VALUE(C.rb_gc_location(C.VALUE(obj)))
	return ret
}

// RbGcMark calls `rb_gc_mark` in C
//
// Original definition is following
//
//	void rb_gc_mark(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcMark(obj VALUE) {
	C.rb_gc_mark(C.VALUE(obj))
}

// RbGcMarkLocations calls `rb_gc_mark_locations` in C
//
// Original definition is following
//
//	void rb_gc_mark_locations(const VALUE *start, const VALUE *end)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcMarkLocations(start *VALUE, end *VALUE) {
	var cStart C.VALUE
	var cEnd C.VALUE
	C.rb_gc_mark_locations(&cStart, &cEnd)
	*start = VALUE(cStart)
	*end = VALUE(cEnd)
}

// RbGcMarkMaybe calls `rb_gc_mark_maybe` in C
//
// Original definition is following
//
//	void rb_gc_mark_maybe(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcMarkMaybe(obj VALUE) {
	C.rb_gc_mark_maybe(C.VALUE(obj))
}

// RbGcMarkMovable calls `rb_gc_mark_movable` in C
//
// Original definition is following
//
//	void rb_gc_mark_movable(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcMarkMovable(obj VALUE) {
	C.rb_gc_mark_movable(C.VALUE(obj))
}

// RbGcRegisterAddress calls `rb_gc_register_address` in C
//
// Original definition is following
//
//	void rb_gc_register_address(VALUE *valptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcRegisterAddress(valptr *VALUE) {
	var cValptr C.VALUE
	C.rb_gc_register_address(&cValptr)
	*valptr = VALUE(cValptr)
}

// RbGcRegisterMarkObject calls `rb_gc_register_mark_object` in C
//
// Original definition is following
//
//	void rb_gc_register_mark_object(VALUE object)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcRegisterMarkObject(object VALUE) {
	C.rb_gc_register_mark_object(C.VALUE(object))
}

// RbGcStart calls `rb_gc_start` in C
//
// Original definition is following
//
//	VALUE rb_gc_start(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcStart() VALUE {
	ret := VALUE(C.rb_gc_start())
	return ret
}

// RbGcStat calls `rb_gc_stat` in C
//
// Original definition is following
//
//	size_t rb_gc_stat(VALUE key_or_buf)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcStat(key_or_buf VALUE) SizeT {
	ret := SizeT(C.rb_gc_stat(C.VALUE(key_or_buf)))
	return ret
}

// RbGcUnprotectLogging calls `rb_gc_unprotect_logging` in C
//
// Original definition is following
//
//	void rb_gc_unprotect_logging(void *objptr, const char *filename, int line)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcUnprotectLogging(objptr unsafe.Pointer, filename string, line int) {
	char, clean := string2Char(filename)
	defer clean()

	C.rb_gc_unprotect_logging(toCPointer(objptr), char, C.int(line))
}

// RbGcUnregisterAddress calls `rb_gc_unregister_address` in C
//
// Original definition is following
//
//	void rb_gc_unregister_address(VALUE *valptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcUnregisterAddress(valptr *VALUE) {
	var cValptr C.VALUE
	C.rb_gc_unregister_address(&cValptr)
	*valptr = VALUE(cValptr)
}

// RbGcUpdateTblRefs calls `rb_gc_update_tbl_refs` in C
//
// Original definition is following
//
//	void rb_gc_update_tbl_refs(st_table *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcUpdateTblRefs(ptr *StTable) {
	var cPtr C.st_table
	C.rb_gc_update_tbl_refs(&cPtr)
	*ptr = StTable(cPtr)
}

// RbGcWritebarrierUnprotect calls `rb_gc_writebarrier_unprotect` in C
//
// Original definition is following
//
//	void rb_gc_writebarrier_unprotect(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGcWritebarrierUnprotect(obj VALUE) {
	C.rb_gc_writebarrier_unprotect(C.VALUE(obj))
}

// RbGlobalVariable calls `rb_global_variable` in C
//
// Original definition is following
//
//	void rb_global_variable(VALUE *)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbGlobalVariable(arg1 *VALUE) {
	var cArg1 C.VALUE
	C.rb_global_variable(&cArg1)
	*arg1 = VALUE(cArg1)
}

// RbMarkHash calls `rb_mark_hash` in C
//
// Original definition is following
//
//	void rb_mark_hash(struct st_table *tbl)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbMarkHash(tbl *StTable) {
	var cTbl C.st_table
	C.rb_mark_hash(&cTbl)
	*tbl = StTable(cTbl)
}

// RbMarkSet calls `rb_mark_set` in C
//
// Original definition is following
//
//	void rb_mark_set(struct st_table *tbl)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbMarkSet(tbl *StTable) {
	var cTbl C.st_table
	C.rb_mark_set(&cTbl)
	*tbl = StTable(cTbl)
}

// RbMarkTbl calls `rb_mark_tbl` in C
//
// Original definition is following
//
//	void rb_mark_tbl(struct st_table *tbl)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbMarkTbl(tbl *StTable) {
	var cTbl C.st_table
	C.rb_mark_tbl(&cTbl)
	*tbl = StTable(cTbl)
}

// RbMarkTblNoPin calls `rb_mark_tbl_no_pin` in C
//
// Original definition is following
//
//	void rb_mark_tbl_no_pin(struct st_table *tbl)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbMarkTblNoPin(tbl *StTable) {
	var cTbl C.st_table
	C.rb_mark_tbl_no_pin(&cTbl)
	*tbl = StTable(cTbl)
}

// RbUndefineFinalizer calls `rb_undefine_finalizer` in C
//
// Original definition is following
//
//	VALUE rb_undefine_finalizer(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbUndefineFinalizer(obj VALUE) VALUE {
	ret := VALUE(C.rb_undefine_finalizer(C.VALUE(obj)))
	return ret
}

// RbObjWbUnprotect calls `rb_obj_wb_unprotect` in C
//
// Original definition is following
//
//	rb_obj_wb_unprotect(
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbObjWbUnprotect(x VALUE, arg2 unsafe.Pointer, filename string, arg4 unsafe.Pointer, line int) VALUE {
	char, clean := string2Char(filename)
	defer clean()

	ret := VALUE(C.rb_obj_wb_unprotect(C.VALUE(x), toCPointer(arg2), char, toCPointer(arg4), C.int(line)))
	return ret
}

// RbObjWrite calls `rb_obj_write` in C
//
// Original definition is following
//
//	rb_obj_write(
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbObjWrite(a VALUE, slot *VALUE, b VALUE, arg4 unsafe.Pointer, filename string, arg6 unsafe.Pointer, line int) VALUE {
	char, clean := string2Char(filename)
	defer clean()

	var cSlot C.VALUE
	ret := VALUE(C.rb_obj_write(C.VALUE(a), &cSlot, C.VALUE(b), toCPointer(arg4), char, toCPointer(arg6), C.int(line)))
	*slot = VALUE(cSlot)
	return ret
}

// RbObjWritten calls `rb_obj_written` in C
//
// Original definition is following
//
//	rb_obj_written(
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/gc.h
func RbObjWritten(a VALUE, arg2 unsafe.Pointer, oldv VALUE, b VALUE, arg5 unsafe.Pointer, filename string, arg7 unsafe.Pointer, line int) VALUE {
	char, clean := string2Char(filename)
	defer clean()

	ret := VALUE(C.rb_obj_written(C.VALUE(a), toCPointer(arg2), C.VALUE(oldv), C.VALUE(b), toCPointer(arg5), char, toCPointer(arg7), C.int(line)))
	return ret
}
