// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbDebugInspectorFuncT is a type for passing `C.rb_debug_inspector_func_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbDebugInspectorFuncT C.rb_debug_inspector_func_t

// RbDebugInspectorT is a type for passing `C.rb_debug_inspector_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbDebugInspectorT C.rb_debug_inspector_t

// RbEventHookFlagT is a type for passing `C.rb_event_hook_flag_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbEventHookFlagT C.rb_event_hook_flag_t

// RbPostponedJobFuncT is a type for passing `C.rb_postponed_job_func_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbPostponedJobFuncT C.rb_postponed_job_func_t

// RbPostponedJobHandleT is a type for passing `C.rb_postponed_job_handle_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbPostponedJobHandleT C.rb_postponed_job_handle_t

// RbTraceArgT is a type for passing `C.rb_trace_arg_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
type RbTraceArgT C.rb_trace_arg_t

// RbAddEventHook2 calls `rb_add_event_hook2` in C
//
// Original definition is following
//
//	void rb_add_event_hook2(rb_event_hook_func_t func, rb_event_flag_t events, VALUE data, rb_event_hook_flag_t hook_flag)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbAddEventHook2(fun RbEventHookFuncT, events RbEventFlagT, data VALUE, hook_flag RbEventHookFlagT) {
	C.rb_add_event_hook2(C.rb_event_hook_func_t(fun), C.rb_event_flag_t(events), C.VALUE(data), C.rb_event_hook_flag_t(hook_flag))
}

// RbDebugInspectorBacktraceLocations calls `rb_debug_inspector_backtrace_locations` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_backtrace_locations(const rb_debug_inspector_t *dc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorBacktraceLocations(dc *RbDebugInspectorT) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_backtrace_locations(&cDc))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorCurrentDepth calls `rb_debug_inspector_current_depth` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_current_depth(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorCurrentDepth() VALUE {
	ret := VALUE(C.rb_debug_inspector_current_depth())
	return ret
}

// RbDebugInspectorFrameBindingGet calls `rb_debug_inspector_frame_binding_get` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_frame_binding_get(const rb_debug_inspector_t *dc, long index)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorFrameBindingGet(dc *RbDebugInspectorT, index Long) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_frame_binding_get(&cDc, C.long(index)))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorFrameClassGet calls `rb_debug_inspector_frame_class_get` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_frame_class_get(const rb_debug_inspector_t *dc, long index)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorFrameClassGet(dc *RbDebugInspectorT, index Long) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_frame_class_get(&cDc, C.long(index)))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorFrameDepth calls `rb_debug_inspector_frame_depth` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_frame_depth(const rb_debug_inspector_t *dc, long index)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorFrameDepth(dc *RbDebugInspectorT, index Long) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_frame_depth(&cDc, C.long(index)))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorFrameIseqGet calls `rb_debug_inspector_frame_iseq_get` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_frame_iseq_get(const rb_debug_inspector_t *dc, long index)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorFrameIseqGet(dc *RbDebugInspectorT, index Long) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_frame_iseq_get(&cDc, C.long(index)))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorFrameSelfGet calls `rb_debug_inspector_frame_self_get` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_frame_self_get(const rb_debug_inspector_t *dc, long index)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorFrameSelfGet(dc *RbDebugInspectorT, index Long) VALUE {
	var cDc C.rb_debug_inspector_t
	ret := VALUE(C.rb_debug_inspector_frame_self_get(&cDc, C.long(index)))
	*dc = RbDebugInspectorT(cDc)
	return ret
}

// RbDebugInspectorOpen calls `rb_debug_inspector_open` in C
//
// Original definition is following
//
//	VALUE rb_debug_inspector_open(rb_debug_inspector_func_t func, void *data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbDebugInspectorOpen(fun RbDebugInspectorFuncT, data unsafe.Pointer) VALUE {
	ret := VALUE(C.rb_debug_inspector_open(C.rb_debug_inspector_func_t(fun), toCPointer(data)))
	return ret
}

// RbPostponedJobPreregister calls `rb_postponed_job_preregister` in C
//
// Original definition is following
//
//	rb_postponed_job_handle_t rb_postponed_job_preregister(unsigned int flags, rb_postponed_job_func_t func, void *data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbPostponedJobPreregister(flags uint, fun RbPostponedJobFuncT, data unsafe.Pointer) RbPostponedJobHandleT {
	ret := RbPostponedJobHandleT(C.rb_postponed_job_preregister(C.uint(flags), C.rb_postponed_job_func_t(fun), toCPointer(data)))
	return ret
}

// RbPostponedJobRegister calls `rb_postponed_job_register` in C
//
// Original definition is following
//
//	int rb_postponed_job_register(unsigned int flags, rb_postponed_job_func_t func, void *data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbPostponedJobRegister(flags uint, fun RbPostponedJobFuncT, data unsafe.Pointer) int {
	ret := int(C.rb_postponed_job_register(C.uint(flags), C.rb_postponed_job_func_t(fun), toCPointer(data)))
	return ret
}

// RbPostponedJobRegisterOne calls `rb_postponed_job_register_one` in C
//
// Original definition is following
//
//	int rb_postponed_job_register_one(unsigned int flags, rb_postponed_job_func_t func, void *data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbPostponedJobRegisterOne(flags uint, fun RbPostponedJobFuncT, data unsafe.Pointer) int {
	ret := int(C.rb_postponed_job_register_one(C.uint(flags), C.rb_postponed_job_func_t(fun), toCPointer(data)))
	return ret
}

// RbPostponedJobTrigger calls `rb_postponed_job_trigger` in C
//
// Original definition is following
//
//	void rb_postponed_job_trigger(rb_postponed_job_handle_t h)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbPostponedJobTrigger(h RbPostponedJobHandleT) {
	C.rb_postponed_job_trigger(C.rb_postponed_job_handle_t(h))
}

// RbProfileFrameAbsolutePath calls `rb_profile_frame_absolute_path` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_absolute_path(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameAbsolutePath(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_absolute_path(C.VALUE(frame)))
	return ret
}

// RbProfileFrameBaseLabel calls `rb_profile_frame_base_label` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_base_label(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameBaseLabel(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_base_label(C.VALUE(frame)))
	return ret
}

// RbProfileFrameClasspath calls `rb_profile_frame_classpath` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_classpath(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameClasspath(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_classpath(C.VALUE(frame)))
	return ret
}

// RbProfileFrameFirstLineno calls `rb_profile_frame_first_lineno` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_first_lineno(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameFirstLineno(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_first_lineno(C.VALUE(frame)))
	return ret
}

// RbProfileFrameFullLabel calls `rb_profile_frame_full_label` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_full_label(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameFullLabel(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_full_label(C.VALUE(frame)))
	return ret
}

// RbProfileFrameLabel calls `rb_profile_frame_label` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_label(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameLabel(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_label(C.VALUE(frame)))
	return ret
}

// RbProfileFrameMethodName calls `rb_profile_frame_method_name` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_method_name(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameMethodName(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_method_name(C.VALUE(frame)))
	return ret
}

// RbProfileFramePath calls `rb_profile_frame_path` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_path(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFramePath(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_path(C.VALUE(frame)))
	return ret
}

// RbProfileFrameQualifiedMethodName calls `rb_profile_frame_qualified_method_name` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_qualified_method_name(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameQualifiedMethodName(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_qualified_method_name(C.VALUE(frame)))
	return ret
}

// RbProfileFrameSingletonMethodP calls `rb_profile_frame_singleton_method_p` in C
//
// Original definition is following
//
//	VALUE rb_profile_frame_singleton_method_p(VALUE frame)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrameSingletonMethodP(frame VALUE) VALUE {
	ret := VALUE(C.rb_profile_frame_singleton_method_p(C.VALUE(frame)))
	return ret
}

// RbProfileFrames calls `rb_profile_frames` in C
//
// Original definition is following
//
//	int rb_profile_frames(int start, int limit, VALUE *buff, int *lines)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileFrames(start int, limit int, buff *VALUE, lines *int) int {
	var cBuff C.VALUE
	var cLines C.int
	ret := int(C.rb_profile_frames(C.int(start), C.int(limit), &cBuff, &cLines))
	*buff = VALUE(cBuff)
	*lines = int(cLines)
	return ret
}

// RbProfileThreadFrames calls `rb_profile_thread_frames` in C
//
// Original definition is following
//
//	int rb_profile_thread_frames(VALUE thread, int start, int limit, VALUE *buff, int *lines)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbProfileThreadFrames(thread VALUE, start int, limit int, buff *VALUE, lines *int) int {
	var cBuff C.VALUE
	var cLines C.int
	ret := int(C.rb_profile_thread_frames(C.VALUE(thread), C.int(start), C.int(limit), &cBuff, &cLines))
	*buff = VALUE(cBuff)
	*lines = int(cLines)
	return ret
}

// RbRemoveEventHookWithData calls `rb_remove_event_hook_with_data` in C
//
// Original definition is following
//
//	int rb_remove_event_hook_with_data(rb_event_hook_func_t func, VALUE data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbRemoveEventHookWithData(fun RbEventHookFuncT, data VALUE) int {
	ret := int(C.rb_remove_event_hook_with_data(C.rb_event_hook_func_t(fun), C.VALUE(data)))
	return ret
}

// RbThreadAddEventHook calls `rb_thread_add_event_hook` in C
//
// Original definition is following
//
//	void rb_thread_add_event_hook(VALUE thval, rb_event_hook_func_t func, rb_event_flag_t events, VALUE data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbThreadAddEventHook(thval VALUE, fun RbEventHookFuncT, events RbEventFlagT, data VALUE) {
	C.rb_thread_add_event_hook(C.VALUE(thval), C.rb_event_hook_func_t(fun), C.rb_event_flag_t(events), C.VALUE(data))
}

// RbThreadAddEventHook2 calls `rb_thread_add_event_hook2` in C
//
// Original definition is following
//
//	void rb_thread_add_event_hook2(VALUE thval, rb_event_hook_func_t func, rb_event_flag_t events, VALUE data, rb_event_hook_flag_t hook_flag)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbThreadAddEventHook2(thval VALUE, fun RbEventHookFuncT, events RbEventFlagT, data VALUE, hook_flag RbEventHookFlagT) {
	C.rb_thread_add_event_hook2(C.VALUE(thval), C.rb_event_hook_func_t(fun), C.rb_event_flag_t(events), C.VALUE(data), C.rb_event_hook_flag_t(hook_flag))
}

// RbThreadRemoveEventHook calls `rb_thread_remove_event_hook` in C
//
// Original definition is following
//
//	int rb_thread_remove_event_hook(VALUE thval, rb_event_hook_func_t func)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbThreadRemoveEventHook(thval VALUE, fun RbEventHookFuncT) int {
	ret := int(C.rb_thread_remove_event_hook(C.VALUE(thval), C.rb_event_hook_func_t(fun)))
	return ret
}

// RbThreadRemoveEventHookWithData calls `rb_thread_remove_event_hook_with_data` in C
//
// Original definition is following
//
//	int rb_thread_remove_event_hook_with_data(VALUE thval, rb_event_hook_func_t func, VALUE data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbThreadRemoveEventHookWithData(thval VALUE, fun RbEventHookFuncT, data VALUE) int {
	ret := int(C.rb_thread_remove_event_hook_with_data(C.VALUE(thval), C.rb_event_hook_func_t(fun), C.VALUE(data)))
	return ret
}

// RbTraceargBinding calls `rb_tracearg_binding` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_binding(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargBinding(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_binding(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargCalleeId calls `rb_tracearg_callee_id` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_callee_id(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargCalleeId(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_callee_id(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargDefinedClass calls `rb_tracearg_defined_class` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_defined_class(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargDefinedClass(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_defined_class(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargEvent calls `rb_tracearg_event` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_event(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargEvent(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_event(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargEventFlag calls `rb_tracearg_event_flag` in C
//
// Original definition is following
//
//	rb_event_flag_t rb_tracearg_event_flag(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargEventFlag(trace_arg *RbTraceArgT) RbEventFlagT {
	var cTraceArg C.rb_trace_arg_t
	ret := RbEventFlagT(C.rb_tracearg_event_flag(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargLineno calls `rb_tracearg_lineno` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_lineno(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargLineno(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_lineno(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargMethodId calls `rb_tracearg_method_id` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_method_id(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargMethodId(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_method_id(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargObject calls `rb_tracearg_object` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_object(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargObject(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_object(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargPath calls `rb_tracearg_path` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_path(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargPath(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_path(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargRaisedException calls `rb_tracearg_raised_exception` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_raised_exception(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargRaisedException(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_raised_exception(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargReturnValue calls `rb_tracearg_return_value` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_return_value(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargReturnValue(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_return_value(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTraceargSelf calls `rb_tracearg_self` in C
//
// Original definition is following
//
//	VALUE rb_tracearg_self(rb_trace_arg_t *trace_arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTraceargSelf(trace_arg *RbTraceArgT) VALUE {
	var cTraceArg C.rb_trace_arg_t
	ret := VALUE(C.rb_tracearg_self(&cTraceArg))
	*trace_arg = RbTraceArgT(cTraceArg)
	return ret
}

// RbTracepointDisable calls `rb_tracepoint_disable` in C
//
// Original definition is following
//
//	VALUE rb_tracepoint_disable(VALUE tpval)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTracepointDisable(tpval VALUE) VALUE {
	ret := VALUE(C.rb_tracepoint_disable(C.VALUE(tpval)))
	return ret
}

// RbTracepointEnable calls `rb_tracepoint_enable` in C
//
// Original definition is following
//
//	VALUE rb_tracepoint_enable(VALUE tpval)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTracepointEnable(tpval VALUE) VALUE {
	ret := VALUE(C.rb_tracepoint_enable(C.VALUE(tpval)))
	return ret
}

// RbTracepointEnabledP calls `rb_tracepoint_enabled_p` in C
//
// Original definition is following
//
//	VALUE rb_tracepoint_enabled_p(VALUE tpval)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTracepointEnabledP(tpval VALUE) VALUE {
	ret := VALUE(C.rb_tracepoint_enabled_p(C.VALUE(tpval)))
	return ret
}

// RbTracepointNew calls `rb_tracepoint_new` in C
//
// Original definition is following
//
//	VALUE rb_tracepoint_new(VALUE target_thread_not_supported_yet, rb_event_flag_t events, void (*func)(VALUE, void *), void *data)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/debug.h
func RbTracepointNew(target_thread_not_supported_yet VALUE, events RbEventFlagT, arg3 unsafe.Pointer, data unsafe.Pointer) VALUE {
	ret := VALUE(C.rb_tracepoint_new(C.VALUE(target_thread_not_supported_yet), C.rb_event_flag_t(events), toCPointer(arg3), toCPointer(data)))
	return ret
}
