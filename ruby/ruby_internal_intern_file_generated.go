// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbFileAbsolutePath calls `rb_file_absolute_path` in C
//
// Original definition is following
//
//	VALUE rb_file_absolute_path(VALUE fname, VALUE dname)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileAbsolutePath(fname VALUE, dname VALUE) VALUE {
	ret := VALUE(C.rb_file_absolute_path(C.VALUE(fname), C.VALUE(dname)))
	return ret
}

// RbFileDirectoryP calls `rb_file_directory_p` in C
//
// Original definition is following
//
//	VALUE rb_file_directory_p(VALUE _, VALUE path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileDirectoryP(arg VALUE, path VALUE) VALUE {
	ret := VALUE(C.rb_file_directory_p(C.VALUE(arg), C.VALUE(path)))
	return ret
}

// RbFileDirname calls `rb_file_dirname` in C
//
// Original definition is following
//
//	VALUE rb_file_dirname(VALUE fname)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileDirname(fname VALUE) VALUE {
	ret := VALUE(C.rb_file_dirname(C.VALUE(fname)))
	return ret
}

// RbFileExpandPath calls `rb_file_expand_path` in C
//
// Original definition is following
//
//	VALUE rb_file_expand_path(VALUE fname, VALUE dname)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileExpandPath(fname VALUE, dname VALUE) VALUE {
	ret := VALUE(C.rb_file_expand_path(C.VALUE(fname), C.VALUE(dname)))
	return ret
}

// RbFileSAbsolutePath calls `rb_file_s_absolute_path` in C
//
// Original definition is following
//
//	VALUE rb_file_s_absolute_path(int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileSAbsolutePath(argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_file_s_absolute_path(C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFileSExpandPath calls `rb_file_s_expand_path` in C
//
// Original definition is following
//
//	VALUE rb_file_s_expand_path(int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileSExpandPath(argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_file_s_expand_path(C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFileSize calls `rb_file_size` in C
//
// Original definition is following
//
//	rb_off_t rb_file_size(VALUE file)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFileSize(file VALUE) RbOffT {
	ret := RbOffT(C.rb_file_size(C.VALUE(file)))
	return ret
}

// RbFindFile calls `rb_find_file` in C
//
// Original definition is following
//
//	VALUE rb_find_file(VALUE path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFindFile(path VALUE) VALUE {
	ret := VALUE(C.rb_find_file(C.VALUE(path)))
	return ret
}

// RbFindFileExt calls `rb_find_file_ext` in C
//
// Original definition is following
//
//	int rb_find_file_ext(VALUE *feature, const char *const *exts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbFindFileExt(feature *VALUE, exts string) int {
	char, clean := string2Char(exts)
	defer clean()

	var cFeature C.VALUE
	ret := int(C.rb_find_file_ext(&cFeature, char))
	*feature = VALUE(cFeature)
	return ret
}

// RbStrEncodeOspath calls `rb_str_encode_ospath` in C
//
// Original definition is following
//
//	VALUE rb_str_encode_ospath(VALUE path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/file.h
func RbStrEncodeOspath(path VALUE) VALUE {
	ret := VALUE(C.rb_str_encode_ospath(C.VALUE(path)))
	return ret
}
