// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbCheckStringType calls `rb_check_string_type` in C
//
// Original definition is following
//
//	VALUE rb_check_string_type(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbCheckStringType(obj VALUE) VALUE {
	ret := VALUE(C.rb_check_string_type(C.VALUE(obj)))
	return ret
}

// RbExternalStrNew calls `rb_external_str_new` in C
//
// Original definition is following
//
//	VALUE rb_external_str_new(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbExternalStrNew(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_external_str_new(char, C.long(len)))
	return ret
}

// RbExternalStrNewCstr calls `rb_external_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_external_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbExternalStrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_external_str_new_cstr(char))
	return ret
}

// RbFilesystemStrNew calls `rb_filesystem_str_new` in C
//
// Original definition is following
//
//	VALUE rb_filesystem_str_new(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbFilesystemStrNew(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_filesystem_str_new(char, C.long(len)))
	return ret
}

// RbFilesystemStrNewCstr calls `rb_filesystem_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_filesystem_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbFilesystemStrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_filesystem_str_new_cstr(char))
	return ret
}

// RbHashStart calls `rb_hash_start` in C
//
// Original definition is following
//
//	st_index_t rb_hash_start(st_index_t i)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbHashStart(i StIndexT) StIndexT {
	ret := StIndexT(C.rb_hash_start(C.st_index_t(i)))
	return ret
}

// RbInternedStr calls `rb_interned_str` in C
//
// Original definition is following
//
//	VALUE rb_interned_str(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbInternedStr(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_interned_str(char, C.long(len)))
	return ret
}

// RbInternedStrCstr calls `rb_interned_str_cstr` in C
//
// Original definition is following
//
//	VALUE rb_interned_str_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbInternedStrCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_interned_str_cstr(char))
	return ret
}

// RbLocaleStrNew calls `rb_locale_str_new` in C
//
// Original definition is following
//
//	VALUE rb_locale_str_new(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbLocaleStrNew(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_locale_str_new(char, C.long(len)))
	return ret
}

// RbLocaleStrNewCstr calls `rb_locale_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_locale_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbLocaleStrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_locale_str_new_cstr(char))
	return ret
}

// RbMemhash calls `rb_memhash` in C
//
// Original definition is following
//
//	st_index_t rb_memhash(const void *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbMemhash(ptr unsafe.Pointer, len Long) StIndexT {
	ret := StIndexT(C.rb_memhash(toCPointer(ptr), C.long(len)))
	return ret
}

// RbMustAsciicompat calls `rb_must_asciicompat` in C
//
// Original definition is following
//
//	void rb_must_asciicompat(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbMustAsciicompat(obj VALUE) {
	C.rb_must_asciicompat(C.VALUE(obj))
}

// RbObjAsString calls `rb_obj_as_string` in C
//
// Original definition is following
//
//	VALUE rb_obj_as_string(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbObjAsString(obj VALUE) VALUE {
	ret := VALUE(C.rb_obj_as_string(C.VALUE(obj)))
	return ret
}

// RbStrAppend calls `rb_str_append` in C
//
// Original definition is following
//
//	VALUE rb_str_append(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrAppend(dst VALUE, src VALUE) VALUE {
	ret := VALUE(C.rb_str_append(C.VALUE(dst), C.VALUE(src)))
	return ret
}

// RbStrBufAppend calls `rb_str_buf_append` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_append(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufAppend(dst VALUE, src VALUE) VALUE {
	ret := VALUE(C.rb_str_buf_append(C.VALUE(dst), C.VALUE(src)))
	return ret
}

// RbStrBufCat calls `rb_str_buf_cat` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_cat(VALUE, const char*, long)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufCat(arg1 VALUE, arg2 string, arg3 Long) VALUE {
	char, clean := string2Char(arg2)
	defer clean()

	ret := VALUE(C.rb_str_buf_cat(C.VALUE(arg1), char, C.long(arg3)))
	return ret
}

// RbStrBufCat2 calls `rb_str_buf_cat2` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_cat2(VALUE, const char*)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufCat2(arg1 VALUE, arg2 string) VALUE {
	char, clean := string2Char(arg2)
	defer clean()

	ret := VALUE(C.rb_str_buf_cat2(C.VALUE(arg1), char))
	return ret
}

// RbStrBufCatAscii calls `rb_str_buf_cat_ascii` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_cat_ascii(VALUE dst, const char *src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufCatAscii(dst VALUE, src string) VALUE {
	char, clean := string2Char(src)
	defer clean()

	ret := VALUE(C.rb_str_buf_cat_ascii(C.VALUE(dst), char))
	return ret
}

// RbStrBufNew calls `rb_str_buf_new` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_new(long capa)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufNew(capa Long) VALUE {
	ret := VALUE(C.rb_str_buf_new(C.long(capa)))
	return ret
}

// RbStrBufNewCstr calls `rb_str_buf_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_str_buf_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrBufNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_str_buf_new_cstr(char))
	return ret
}

// RbStrCat calls `rb_str_cat` in C
//
// Original definition is following
//
//	VALUE rb_str_cat(VALUE dst, const char *src, long srclen)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrCat(dst VALUE, src string, srclen Long) VALUE {
	char, clean := string2Char(src)
	defer clean()

	ret := VALUE(C.rb_str_cat(C.VALUE(dst), char, C.long(srclen)))
	return ret
}

// RbStrCat2 calls `rb_str_cat2` in C
//
// Original definition is following
//
//	VALUE rb_str_cat2(VALUE, const char*)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrCat2(arg1 VALUE, arg2 string) VALUE {
	char, clean := string2Char(arg2)
	defer clean()

	ret := VALUE(C.rb_str_cat2(C.VALUE(arg1), char))
	return ret
}

// RbStrCatCstr calls `rb_str_cat_cstr` in C
//
// Original definition is following
//
//	VALUE rb_str_cat_cstr(VALUE dst, const char *src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrCatCstr(dst VALUE, src string) VALUE {
	char, clean := string2Char(src)
	defer clean()

	ret := VALUE(C.rb_str_cat_cstr(C.VALUE(dst), char))
	return ret
}

// RbStrCmp calls `rb_str_cmp` in C
//
// Original definition is following
//
//	int rb_str_cmp(VALUE lhs, VALUE rhs)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrCmp(lhs VALUE, rhs VALUE) int {
	ret := int(C.rb_str_cmp(C.VALUE(lhs), C.VALUE(rhs)))
	return ret
}

// RbStrComparable calls `rb_str_comparable` in C
//
// Original definition is following
//
//	int rb_str_comparable(VALUE str1, VALUE str2)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrComparable(str1 VALUE, str2 VALUE) int {
	ret := int(C.rb_str_comparable(C.VALUE(str1), C.VALUE(str2)))
	return ret
}

// RbStrConcat calls `rb_str_concat` in C
//
// Original definition is following
//
//	VALUE rb_str_concat(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrConcat(dst VALUE, src VALUE) VALUE {
	ret := VALUE(C.rb_str_concat(C.VALUE(dst), C.VALUE(src)))
	return ret
}

// RbStrDropBytes calls `rb_str_drop_bytes` in C
//
// Original definition is following
//
//	VALUE rb_str_drop_bytes(VALUE str, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrDropBytes(str VALUE, len Long) VALUE {
	ret := VALUE(C.rb_str_drop_bytes(C.VALUE(str), C.long(len)))
	return ret
}

// RbStrDump calls `rb_str_dump` in C
//
// Original definition is following
//
//	VALUE rb_str_dump(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrDump(str VALUE) VALUE {
	ret := VALUE(C.rb_str_dump(C.VALUE(str)))
	return ret
}

// RbStrDup calls `rb_str_dup` in C
//
// Original definition is following
//
//	VALUE rb_str_dup(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrDup(str VALUE) VALUE {
	ret := VALUE(C.rb_str_dup(C.VALUE(str)))
	return ret
}

// RbStrDupFrozen calls `rb_str_dup_frozen` in C
//
// Original definition is following
//
//	VALUE rb_str_dup_frozen(VALUE)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrDupFrozen(arg1 VALUE) VALUE {
	ret := VALUE(C.rb_str_dup_frozen(C.VALUE(arg1)))
	return ret
}

// RbStrEllipsize calls `rb_str_ellipsize` in C
//
// Original definition is following
//
//	VALUE rb_str_ellipsize(VALUE str, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrEllipsize(str VALUE, len Long) VALUE {
	ret := VALUE(C.rb_str_ellipsize(C.VALUE(str), C.long(len)))
	return ret
}

// RbStrEqual calls `rb_str_equal` in C
//
// Original definition is following
//
//	VALUE rb_str_equal(VALUE str1, VALUE str2)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrEqual(str1 VALUE, str2 VALUE) VALUE {
	ret := VALUE(C.rb_str_equal(C.VALUE(str1), C.VALUE(str2)))
	return ret
}

// RbStrFree calls `rb_str_free` in C
//
// Original definition is following
//
//	void rb_str_free(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrFree(str VALUE) {
	C.rb_str_free(C.VALUE(str))
}

// RbStrFreeze calls `rb_str_freeze` in C
//
// Original definition is following
//
//	VALUE rb_str_freeze(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrFreeze(str VALUE) VALUE {
	ret := VALUE(C.rb_str_freeze(C.VALUE(str)))
	return ret
}

// RbStrHash calls `rb_str_hash` in C
//
// Original definition is following
//
//	st_index_t rb_str_hash(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrHash(str VALUE) StIndexT {
	ret := StIndexT(C.rb_str_hash(C.VALUE(str)))
	return ret
}

// RbStrHashCmp calls `rb_str_hash_cmp` in C
//
// Original definition is following
//
//	int rb_str_hash_cmp(VALUE str1, VALUE str2)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrHashCmp(str1 VALUE, str2 VALUE) int {
	ret := int(C.rb_str_hash_cmp(C.VALUE(str1), C.VALUE(str2)))
	return ret
}

// RbStrInspect calls `rb_str_inspect` in C
//
// Original definition is following
//
//	VALUE rb_str_inspect(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrInspect(str VALUE) VALUE {
	ret := VALUE(C.rb_str_inspect(C.VALUE(str)))
	return ret
}

// RbStrIntern calls `rb_str_intern` in C
//
// Original definition is following
//
//	VALUE rb_str_intern(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrIntern(str VALUE) VALUE {
	ret := VALUE(C.rb_str_intern(C.VALUE(str)))
	return ret
}

// RbStrLength calls `rb_str_length` in C
//
// Original definition is following
//
//	VALUE rb_str_length(VALUE)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrLength(arg1 VALUE) VALUE {
	ret := VALUE(C.rb_str_length(C.VALUE(arg1)))
	return ret
}

// RbStrLocktmp calls `rb_str_locktmp` in C
//
// Original definition is following
//
//	VALUE rb_str_locktmp(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrLocktmp(str VALUE) VALUE {
	ret := VALUE(C.rb_str_locktmp(C.VALUE(str)))
	return ret
}

// RbStrModify calls `rb_str_modify` in C
//
// Original definition is following
//
//	void rb_str_modify(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrModify(str VALUE) {
	C.rb_str_modify(C.VALUE(str))
}

// RbStrModifyExpand calls `rb_str_modify_expand` in C
//
// Original definition is following
//
//	void rb_str_modify_expand(VALUE str, long capa)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrModifyExpand(str VALUE, capa Long) {
	C.rb_str_modify_expand(C.VALUE(str), C.long(capa))
}

// RbStrNewCstr calls `rb_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_str_new_cstr(char))
	return ret
}

// RbStrNewFrozen calls `rb_str_new_frozen` in C
//
// Original definition is following
//
//	VALUE rb_str_new_frozen(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrNewFrozen(str VALUE) VALUE {
	ret := VALUE(C.rb_str_new_frozen(C.VALUE(str)))
	return ret
}

// RbStrNewShared calls `rb_str_new_shared` in C
//
// Original definition is following
//
//	VALUE rb_str_new_shared(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrNewShared(str VALUE) VALUE {
	ret := VALUE(C.rb_str_new_shared(C.VALUE(str)))
	return ret
}

// RbStrNewStatic calls `rb_str_new_static` in C
//
// Original definition is following
//
//	VALUE rb_str_new_static(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrNewStatic(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_str_new_static(char, C.long(len)))
	return ret
}

// RbStrNewWithClass calls `rb_str_new_with_class` in C
//
// Original definition is following
//
//	VALUE rb_str_new_with_class(VALUE obj, const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrNewWithClass(obj VALUE, ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_str_new_with_class(C.VALUE(obj), char, C.long(len)))
	return ret
}

// RbStrOffset calls `rb_str_offset` in C
//
// Original definition is following
//
//	long rb_str_offset(VALUE str, long pos)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrOffset(str VALUE, pos Long) Long {
	ret := Long(C.rb_str_offset(C.VALUE(str), C.long(pos)))
	return ret
}

// RbStrPlus calls `rb_str_plus` in C
//
// Original definition is following
//
//	VALUE rb_str_plus(VALUE lhs, VALUE rhs)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrPlus(lhs VALUE, rhs VALUE) VALUE {
	ret := VALUE(C.rb_str_plus(C.VALUE(lhs), C.VALUE(rhs)))
	return ret
}

// RbStrReplace calls `rb_str_replace` in C
//
// Original definition is following
//
//	VALUE rb_str_replace(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrReplace(dst VALUE, src VALUE) VALUE {
	ret := VALUE(C.rb_str_replace(C.VALUE(dst), C.VALUE(src)))
	return ret
}

// RbStrResize calls `rb_str_resize` in C
//
// Original definition is following
//
//	VALUE rb_str_resize(VALUE str, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrResize(str VALUE, len Long) VALUE {
	ret := VALUE(C.rb_str_resize(C.VALUE(str), C.long(len)))
	return ret
}

// RbStrResurrect calls `rb_str_resurrect` in C
//
// Original definition is following
//
//	VALUE rb_str_resurrect(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrResurrect(str VALUE) VALUE {
	ret := VALUE(C.rb_str_resurrect(C.VALUE(str)))
	return ret
}

// RbStrScrub calls `rb_str_scrub` in C
//
// Original definition is following
//
//	VALUE rb_str_scrub(VALUE str, VALUE repl)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrScrub(str VALUE, repl VALUE) VALUE {
	ret := VALUE(C.rb_str_scrub(C.VALUE(str), C.VALUE(repl)))
	return ret
}

// RbStrSetLen calls `rb_str_set_len` in C
//
// Original definition is following
//
//	void rb_str_set_len(VALUE str, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSetLen(str VALUE, len Long) {
	C.rb_str_set_len(C.VALUE(str), C.long(len))
}

// RbStrSharedReplace calls `rb_str_shared_replace` in C
//
// Original definition is following
//
//	void rb_str_shared_replace(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSharedReplace(dst VALUE, src VALUE) {
	C.rb_str_shared_replace(C.VALUE(dst), C.VALUE(src))
}

// RbStrSplit calls `rb_str_split` in C
//
// Original definition is following
//
//	VALUE rb_str_split(VALUE str, const char *delim)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSplit(str VALUE, delim string) VALUE {
	char, clean := string2Char(delim)
	defer clean()

	ret := VALUE(C.rb_str_split(C.VALUE(str), char))
	return ret
}

// RbStrStrlen calls `rb_str_strlen` in C
//
// Original definition is following
//
//	long rb_str_strlen(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrStrlen(str VALUE) Long {
	ret := Long(C.rb_str_strlen(C.VALUE(str)))
	return ret
}

// RbStrSublen calls `rb_str_sublen` in C
//
// Original definition is following
//
//	long rb_str_sublen(VALUE str, long pos)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSublen(str VALUE, pos Long) Long {
	ret := Long(C.rb_str_sublen(C.VALUE(str), C.long(pos)))
	return ret
}

// RbStrSubpos calls `rb_str_subpos` in C
//
// Original definition is following
//
//	char *rb_str_subpos(VALUE str, long beg, long *len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSubpos(str VALUE, beg Long, len *Long) string {
	var cLen C.long
	ret := string(C.rb_str_subpos(C.VALUE(str), C.long(beg), &cLen))
	*len = Long(cLen)
	return ret
}

// RbStrSubseq calls `rb_str_subseq` in C
//
// Original definition is following
//
//	VALUE rb_str_subseq(VALUE str, long beg, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSubseq(str VALUE, beg Long, len Long) VALUE {
	ret := VALUE(C.rb_str_subseq(C.VALUE(str), C.long(beg), C.long(len)))
	return ret
}

// RbStrSubstr calls `rb_str_substr` in C
//
// Original definition is following
//
//	VALUE rb_str_substr(VALUE str, long beg, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSubstr(str VALUE, beg Long, len Long) VALUE {
	ret := VALUE(C.rb_str_substr(C.VALUE(str), C.long(beg), C.long(len)))
	return ret
}

// RbStrSucc calls `rb_str_succ` in C
//
// Original definition is following
//
//	VALUE rb_str_succ(VALUE orig)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrSucc(orig VALUE) VALUE {
	ret := VALUE(C.rb_str_succ(C.VALUE(orig)))
	return ret
}

// RbStrTimes calls `rb_str_times` in C
//
// Original definition is following
//
//	VALUE rb_str_times(VALUE str, VALUE num)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrTimes(str VALUE, num VALUE) VALUE {
	ret := VALUE(C.rb_str_times(C.VALUE(str), C.VALUE(num)))
	return ret
}

// RbStrTmpNew calls `rb_str_tmp_new` in C
//
// Original definition is following
//
//	VALUE rb_str_tmp_new(long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrTmpNew(len Long) VALUE {
	ret := VALUE(C.rb_str_tmp_new(C.long(len)))
	return ret
}

// RbStrToInternedStr calls `rb_str_to_interned_str` in C
//
// Original definition is following
//
//	VALUE rb_str_to_interned_str(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrToInternedStr(str VALUE) VALUE {
	ret := VALUE(C.rb_str_to_interned_str(C.VALUE(str)))
	return ret
}

// RbStrUnlocktmp calls `rb_str_unlocktmp` in C
//
// Original definition is following
//
//	VALUE rb_str_unlocktmp(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrUnlocktmp(str VALUE) VALUE {
	ret := VALUE(C.rb_str_unlocktmp(C.VALUE(str)))
	return ret
}

// RbStrUpdate calls `rb_str_update` in C
//
// Original definition is following
//
//	void rb_str_update(VALUE dst, long beg, long len, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbStrUpdate(dst VALUE, beg Long, len Long, src VALUE) {
	C.rb_str_update(C.VALUE(dst), C.long(beg), C.long(len), C.VALUE(src))
}

// RbSymToS calls `rb_sym_to_s` in C
//
// Original definition is following
//
//	VALUE rb_sym_to_s(VALUE sym)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbSymToS(sym VALUE) VALUE {
	ret := VALUE(C.rb_sym_to_s(C.VALUE(sym)))
	return ret
}

// RbUsasciiStrNew calls `rb_usascii_str_new` in C
//
// Original definition is following
//
//	VALUE rb_usascii_str_new(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUsasciiStrNew(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_usascii_str_new(char, C.long(len)))
	return ret
}

// RbUsasciiStrNewCstr calls `rb_usascii_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_usascii_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUsasciiStrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_usascii_str_new_cstr(char))
	return ret
}

// RbUsasciiStrNewStatic calls `rb_usascii_str_new_static` in C
//
// Original definition is following
//
//	VALUE rb_usascii_str_new_static(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUsasciiStrNewStatic(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_usascii_str_new_static(char, C.long(len)))
	return ret
}

// RbUtf8StrNew calls `rb_utf8_str_new` in C
//
// Original definition is following
//
//	VALUE rb_utf8_str_new(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUtf8StrNew(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_utf8_str_new(char, C.long(len)))
	return ret
}

// RbUtf8StrNewCstr calls `rb_utf8_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_utf8_str_new_cstr(const char *ptr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUtf8StrNewCstr(ptr string) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_utf8_str_new_cstr(char))
	return ret
}

// RbUtf8StrNewStatic calls `rb_utf8_str_new_static` in C
//
// Original definition is following
//
//	VALUE rb_utf8_str_new_static(const char *ptr, long len)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/string.h
func RbUtf8StrNewStatic(ptr string, len Long) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	ret := VALUE(C.rb_utf8_str_new_static(char, C.long(len)))
	return ret
}
