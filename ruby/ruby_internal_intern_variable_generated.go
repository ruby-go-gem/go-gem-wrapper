// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbAliasVariable calls `rb_alias_variable` in C
//
// Original definition is following
//
//	void rb_alias_variable(ID dst, ID src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbAliasVariable(dst ID, src ID) {
	C.rb_alias_variable(C.ID(dst), C.ID(src))
}

// RbAttrGet calls `rb_attr_get` in C
//
// Original definition is following
//
//	VALUE rb_attr_get(VALUE obj, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbAttrGet(obj VALUE, name ID) VALUE {
	ret := VALUE(C.rb_attr_get(C.VALUE(obj), C.ID(name)))
	return ret
}

// RbAutoloadLoad calls `rb_autoload_load` in C
//
// Original definition is following
//
//	VALUE rb_autoload_load(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbAutoloadLoad(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_autoload_load(C.VALUE(space), C.ID(name)))
	return ret
}

// RbAutoloadP calls `rb_autoload_p` in C
//
// Original definition is following
//
//	VALUE rb_autoload_p(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbAutoloadP(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_autoload_p(C.VALUE(space), C.ID(name)))
	return ret
}

// RbClassName calls `rb_class_name` in C
//
// Original definition is following
//
//	VALUE rb_class_name(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbClassName(obj VALUE) VALUE {
	ret := VALUE(C.rb_class_name(C.VALUE(obj)))
	return ret
}

// RbClassPath calls `rb_class_path` in C
//
// Original definition is following
//
//	VALUE rb_class_path(VALUE mod)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbClassPath(mod VALUE) VALUE {
	ret := VALUE(C.rb_class_path(C.VALUE(mod)))
	return ret
}

// RbClassPathCached calls `rb_class_path_cached` in C
//
// Original definition is following
//
//	VALUE rb_class_path_cached(VALUE mod)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbClassPathCached(mod VALUE) VALUE {
	ret := VALUE(C.rb_class_path_cached(C.VALUE(mod)))
	return ret
}

// RbConstDefined calls `rb_const_defined` in C
//
// Original definition is following
//
//	int rb_const_defined(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstDefined(space VALUE, name ID) int {
	ret := int(C.rb_const_defined(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstDefinedAt calls `rb_const_defined_at` in C
//
// Original definition is following
//
//	int rb_const_defined_at(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstDefinedAt(space VALUE, name ID) int {
	ret := int(C.rb_const_defined_at(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstDefinedFrom calls `rb_const_defined_from` in C
//
// Original definition is following
//
//	int rb_const_defined_from(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstDefinedFrom(space VALUE, name ID) int {
	ret := int(C.rb_const_defined_from(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstGet calls `rb_const_get` in C
//
// Original definition is following
//
//	VALUE rb_const_get(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstGet(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_const_get(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstGetAt calls `rb_const_get_at` in C
//
// Original definition is following
//
//	VALUE rb_const_get_at(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstGetAt(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_const_get_at(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstGetFrom calls `rb_const_get_from` in C
//
// Original definition is following
//
//	VALUE rb_const_get_from(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstGetFrom(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_const_get_from(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstList calls `rb_const_list` in C
//
// Original definition is following
//
//	VALUE rb_const_list(void*)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstList(arg1 unsafe.Pointer) VALUE {
	ret := VALUE(C.rb_const_list(toCPointer(arg1)))
	return ret
}

// RbConstRemove calls `rb_const_remove` in C
//
// Original definition is following
//
//	VALUE rb_const_remove(VALUE space, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstRemove(space VALUE, name ID) VALUE {
	ret := VALUE(C.rb_const_remove(C.VALUE(space), C.ID(name)))
	return ret
}

// RbConstSet calls `rb_const_set` in C
//
// Original definition is following
//
//	void rb_const_set(VALUE space, ID name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbConstSet(space VALUE, name ID, val VALUE) {
	C.rb_const_set(C.VALUE(space), C.ID(name), C.VALUE(val))
}

// RbCvGet calls `rb_cv_get` in C
//
// Original definition is following
//
//	VALUE rb_cv_get(VALUE klass, const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvGet(klass VALUE, name string) VALUE {
	char, clean := string2Char(name)
	defer clean()

	ret := VALUE(C.rb_cv_get(C.VALUE(klass), char))
	return ret
}

// RbCvSet calls `rb_cv_set` in C
//
// Original definition is following
//
//	void rb_cv_set(VALUE klass, const char *name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvSet(klass VALUE, name string, val VALUE) {
	char, clean := string2Char(name)
	defer clean()

	C.rb_cv_set(C.VALUE(klass), char, C.VALUE(val))
}

// RbCvarDefined calls `rb_cvar_defined` in C
//
// Original definition is following
//
//	VALUE rb_cvar_defined(VALUE klass, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvarDefined(klass VALUE, name ID) VALUE {
	ret := VALUE(C.rb_cvar_defined(C.VALUE(klass), C.ID(name)))
	return ret
}

// RbCvarFind calls `rb_cvar_find` in C
//
// Original definition is following
//
//	VALUE rb_cvar_find(VALUE klass, ID name, VALUE *front)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvarFind(klass VALUE, name ID, front *VALUE) VALUE {
	var cFront C.VALUE
	ret := VALUE(C.rb_cvar_find(C.VALUE(klass), C.ID(name), &cFront))
	*front = VALUE(cFront)
	return ret
}

// RbCvarGet calls `rb_cvar_get` in C
//
// Original definition is following
//
//	VALUE rb_cvar_get(VALUE klass, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvarGet(klass VALUE, name ID) VALUE {
	ret := VALUE(C.rb_cvar_get(C.VALUE(klass), C.ID(name)))
	return ret
}

// RbCvarSet calls `rb_cvar_set` in C
//
// Original definition is following
//
//	void rb_cvar_set(VALUE klass, ID name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbCvarSet(klass VALUE, name ID, val VALUE) {
	C.rb_cvar_set(C.VALUE(klass), C.ID(name), C.VALUE(val))
}

// RbDefineClassVariable calls `rb_define_class_variable` in C
//
// Original definition is following
//
//	void rb_define_class_variable(VALUE, const char*, VALUE)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbDefineClassVariable(arg1 VALUE, arg2 string, arg3 VALUE) {
	char, clean := string2Char(arg2)
	defer clean()

	C.rb_define_class_variable(C.VALUE(arg1), char, C.VALUE(arg3))
}

// RbFGlobalVariables calls `rb_f_global_variables` in C
//
// Original definition is following
//
//	VALUE rb_f_global_variables(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbFGlobalVariables() VALUE {
	ret := VALUE(C.rb_f_global_variables())
	return ret
}

// RbFTraceVar calls `rb_f_trace_var` in C
//
// Original definition is following
//
//	VALUE rb_f_trace_var(int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbFTraceVar(argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_f_trace_var(C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFUntraceVar calls `rb_f_untrace_var` in C
//
// Original definition is following
//
//	VALUE rb_f_untrace_var(int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbFUntraceVar(argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_f_untrace_var(C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFreeGenericIvar calls `rb_free_generic_ivar` in C
//
// Original definition is following
//
//	void rb_free_generic_ivar(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbFreeGenericIvar(obj VALUE) {
	C.rb_free_generic_ivar(C.VALUE(obj))
}

// RbIvarCount calls `rb_ivar_count` in C
//
// Original definition is following
//
//	st_index_t rb_ivar_count(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbIvarCount(obj VALUE) StIndexT {
	ret := StIndexT(C.rb_ivar_count(C.VALUE(obj)))
	return ret
}

// RbIvarDefined calls `rb_ivar_defined` in C
//
// Original definition is following
//
//	VALUE rb_ivar_defined(VALUE obj, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbIvarDefined(obj VALUE, name ID) VALUE {
	ret := VALUE(C.rb_ivar_defined(C.VALUE(obj), C.ID(name)))
	return ret
}

// RbIvarForeach calls `rb_ivar_foreach` in C
//
// Original definition is following
//
//	void rb_ivar_foreach(VALUE obj, int (*func)(ID name, VALUE val, st_data_t arg), st_data_t arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbIvarForeach(obj VALUE, arg2 unsafe.Pointer, arg StDataT) {
	C.rb_ivar_foreach(C.VALUE(obj), toCPointer(arg2), C.st_data_t(arg))
}

// RbIvarGet calls `rb_ivar_get` in C
//
// Original definition is following
//
//	VALUE rb_ivar_get(VALUE obj, ID name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbIvarGet(obj VALUE, name ID) VALUE {
	ret := VALUE(C.rb_ivar_get(C.VALUE(obj), C.ID(name)))
	return ret
}

// RbIvarSet calls `rb_ivar_set` in C
//
// Original definition is following
//
//	VALUE rb_ivar_set(VALUE obj, ID name, VALUE val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbIvarSet(obj VALUE, name ID, val VALUE) VALUE {
	ret := VALUE(C.rb_ivar_set(C.VALUE(obj), C.ID(name), C.VALUE(val)))
	return ret
}

// RbModClassVariables calls `rb_mod_class_variables` in C
//
// Original definition is following
//
//	VALUE rb_mod_class_variables(int argc, const VALUE *argv, VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModClassVariables(argc int, argv *VALUE, recv VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_mod_class_variables(C.int(argc), &cArgv, C.VALUE(recv)))
	*argv = VALUE(cArgv)
	return ret
}

// RbModConstAt calls `rb_mod_const_at` in C
//
// Original definition is following
//
//	void *rb_mod_const_at(VALUE, void*)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModConstAt(arg1 VALUE, arg2 unsafe.Pointer) unsafe.Pointer {
	ret := unsafe.Pointer(C.rb_mod_const_at(C.VALUE(arg1), toCPointer(arg2)))
	return ret
}

// RbModConstOf calls `rb_mod_const_of` in C
//
// Original definition is following
//
//	void *rb_mod_const_of(VALUE, void*)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModConstOf(arg1 VALUE, arg2 unsafe.Pointer) unsafe.Pointer {
	ret := unsafe.Pointer(C.rb_mod_const_of(C.VALUE(arg1), toCPointer(arg2)))
	return ret
}

// RbModConstants calls `rb_mod_constants` in C
//
// Original definition is following
//
//	VALUE rb_mod_constants(int argc, const VALUE *argv, VALUE recv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModConstants(argc int, argv *VALUE, recv VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_mod_constants(C.int(argc), &cArgv, C.VALUE(recv)))
	*argv = VALUE(cArgv)
	return ret
}

// RbModRemoveConst calls `rb_mod_remove_const` in C
//
// Original definition is following
//
//	VALUE rb_mod_remove_const(VALUE space, VALUE name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModRemoveConst(space VALUE, name VALUE) VALUE {
	ret := VALUE(C.rb_mod_remove_const(C.VALUE(space), C.VALUE(name)))
	return ret
}

// RbModRemoveCvar calls `rb_mod_remove_cvar` in C
//
// Original definition is following
//
//	VALUE rb_mod_remove_cvar(VALUE mod, VALUE name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbModRemoveCvar(mod VALUE, name VALUE) VALUE {
	ret := VALUE(C.rb_mod_remove_cvar(C.VALUE(mod), C.VALUE(name)))
	return ret
}

// RbObjInstanceVariables calls `rb_obj_instance_variables` in C
//
// Original definition is following
//
//	VALUE rb_obj_instance_variables(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbObjInstanceVariables(obj VALUE) VALUE {
	ret := VALUE(C.rb_obj_instance_variables(C.VALUE(obj)))
	return ret
}

// RbObjRemoveInstanceVariable calls `rb_obj_remove_instance_variable` in C
//
// Original definition is following
//
//	VALUE rb_obj_remove_instance_variable(VALUE obj, VALUE name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbObjRemoveInstanceVariable(obj VALUE, name VALUE) VALUE {
	ret := VALUE(C.rb_obj_remove_instance_variable(C.VALUE(obj), C.VALUE(name)))
	return ret
}

// RbPath2Class calls `rb_path2class` in C
//
// Original definition is following
//
//	VALUE rb_path2class(const char *path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbPath2Class(path string) VALUE {
	char, clean := string2Char(path)
	defer clean()

	ret := VALUE(C.rb_path2class(char))
	return ret
}

// RbPathToClass calls `rb_path_to_class` in C
//
// Original definition is following
//
//	VALUE rb_path_to_class(VALUE path)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbPathToClass(path VALUE) VALUE {
	ret := VALUE(C.rb_path_to_class(C.VALUE(path)))
	return ret
}

// RbSetClassPath calls `rb_set_class_path` in C
//
// Original definition is following
//
//	void rb_set_class_path(VALUE klass, VALUE space, const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbSetClassPath(klass VALUE, space VALUE, name string) {
	char, clean := string2Char(name)
	defer clean()

	C.rb_set_class_path(C.VALUE(klass), C.VALUE(space), char)
}

// RbSetClassPathString calls `rb_set_class_path_string` in C
//
// Original definition is following
//
//	void rb_set_class_path_string(VALUE klass, VALUE space, VALUE name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/variable.h
func RbSetClassPathString(klass VALUE, space VALUE, name VALUE) {
	C.rb_set_class_path_string(C.VALUE(klass), C.VALUE(space), C.VALUE(name))
}
