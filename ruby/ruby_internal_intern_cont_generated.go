// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbFiberAliveP calls `rb_fiber_alive_p` in C
//
// Original definition is following
//
//	VALUE rb_fiber_alive_p(VALUE fiber)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberAliveP(fiber VALUE) VALUE {
	ret := VALUE(C.rb_fiber_alive_p(C.VALUE(fiber)))
	return ret
}

// RbFiberCurrent calls `rb_fiber_current` in C
//
// Original definition is following
//
//	VALUE rb_fiber_current(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberCurrent() VALUE {
	ret := VALUE(C.rb_fiber_current())
	return ret
}

// RbFiberNewStorage calls `rb_fiber_new_storage` in C
//
// Original definition is following
//
//	VALUE rb_fiber_new_storage(rb_block_call_func_t func, VALUE callback_obj, VALUE storage)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberNewStorage(fun RbBlockCallFuncT, callback_obj VALUE, storage VALUE) VALUE {
	ret := VALUE(C.rb_fiber_new_storage(C.rb_block_call_func_t(fun), C.VALUE(callback_obj), C.VALUE(storage)))
	return ret
}

// RbFiberRaise calls `rb_fiber_raise` in C
//
// Original definition is following
//
//	VALUE rb_fiber_raise(VALUE fiber, int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberRaise(fiber VALUE, argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_raise(C.VALUE(fiber), C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberResume calls `rb_fiber_resume` in C
//
// Original definition is following
//
//	VALUE rb_fiber_resume(VALUE fiber, int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberResume(fiber VALUE, argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_resume(C.VALUE(fiber), C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberResumeKw calls `rb_fiber_resume_kw` in C
//
// Original definition is following
//
//	VALUE rb_fiber_resume_kw(VALUE fiber, int argc, const VALUE *argv, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberResumeKw(fiber VALUE, argc int, argv *VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_resume_kw(C.VALUE(fiber), C.int(argc), &cArgv, C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberTransfer calls `rb_fiber_transfer` in C
//
// Original definition is following
//
//	VALUE rb_fiber_transfer(VALUE fiber, int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberTransfer(fiber VALUE, argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_transfer(C.VALUE(fiber), C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberTransferKw calls `rb_fiber_transfer_kw` in C
//
// Original definition is following
//
//	VALUE rb_fiber_transfer_kw(VALUE fiber, int argc, const VALUE *argv, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberTransferKw(fiber VALUE, argc int, argv *VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_transfer_kw(C.VALUE(fiber), C.int(argc), &cArgv, C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberYield calls `rb_fiber_yield` in C
//
// Original definition is following
//
//	VALUE rb_fiber_yield(int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberYield(argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_yield(C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbFiberYieldKw calls `rb_fiber_yield_kw` in C
//
// Original definition is following
//
//	VALUE rb_fiber_yield_kw(int argc, const VALUE *argv, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbFiberYieldKw(argc int, argv *VALUE, kw_splat int) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_fiber_yield_kw(C.int(argc), &cArgv, C.int(kw_splat)))
	*argv = VALUE(cArgv)
	return ret
}

// RbObjIsFiber calls `rb_obj_is_fiber` in C
//
// Original definition is following
//
//	VALUE rb_obj_is_fiber(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/cont.h
func RbObjIsFiber(obj VALUE) VALUE {
	ret := VALUE(C.rb_obj_is_fiber(C.VALUE(obj)))
	return ret
}
