// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbWarningCategoryT is a type for passing `C.rb_warning_category_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
type RbWarningCategoryT C.rb_warning_category_t

// RbBugErrno calls `rb_bug_errno` in C
//
// Original definition is following
//
//	void rb_bug_errno(const char *msg, int err)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbBugErrno(msg string, err int) {
	char, clean := string2Char(msg)
	defer clean()

	C.rb_bug_errno(char, C.int(err))
}

// RbModSysFail calls `rb_mod_sys_fail` in C
//
// Original definition is following
//
//	void rb_mod_sys_fail(VALUE mod, const char *msg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbModSysFail(mod VALUE, msg string) {
	char, clean := string2Char(msg)
	defer clean()

	C.rb_mod_sys_fail(C.VALUE(mod), char)
}

// RbModSyserrFail calls `rb_mod_syserr_fail` in C
//
// Original definition is following
//
//	void rb_mod_syserr_fail(VALUE mod, int err, const char *msg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbModSyserrFail(mod VALUE, err int, msg string) {
	char, clean := string2Char(msg)
	defer clean()

	C.rb_mod_syserr_fail(C.VALUE(mod), C.int(err), char)
}

// RbRubyDebugPtr calls `rb_ruby_debug_ptr` in C
//
// Original definition is following
//
//	VALUE *rb_ruby_debug_ptr(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbRubyDebugPtr() *VALUE {
	ret := (*VALUE)(C.rb_ruby_debug_ptr())
	return ret
}

// RbRubyVerbosePtr calls `rb_ruby_verbose_ptr` in C
//
// Original definition is following
//
//	VALUE *rb_ruby_verbose_ptr(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbRubyVerbosePtr() *VALUE {
	ret := (*VALUE)(C.rb_ruby_verbose_ptr())
	return ret
}

// RbSetErrinfo calls `rb_set_errinfo` in C
//
// Original definition is following
//
//	void rb_set_errinfo(VALUE err)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbSetErrinfo(err VALUE) {
	C.rb_set_errinfo(C.VALUE(err))
}

// RbSyserrNew calls `rb_syserr_new` in C
//
// Original definition is following
//
//	VALUE rb_syserr_new(int err, const char * msg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbSyserrNew(err int, msg string) VALUE {
	char, clean := string2Char(msg)
	defer clean()

	ret := VALUE(C.rb_syserr_new(C.int(err), char))
	return ret
}

// RbSyserrNewStr calls `rb_syserr_new_str` in C
//
// Original definition is following
//
//	VALUE rb_syserr_new_str(int n, VALUE arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/error.h
func RbSyserrNewStr(n int, arg VALUE) VALUE {
	ret := VALUE(C.rb_syserr_new_str(C.int(n), C.VALUE(arg)))
	return ret
}
