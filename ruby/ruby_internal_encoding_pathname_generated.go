// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbEncPathEnd calls `rb_enc_path_end` in C
//
// Original definition is following
//
//	char *rb_enc_path_end(const char *path, const char *end, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/pathname.h
func RbEncPathEnd(path string, end string, enc *RbEncoding) string {
	charPath, cleanCharpath := string2Char(path)
	defer cleanCharpath()

	charEnd, cleanCharend := string2Char(end)
	defer cleanCharend()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_path_end(charPath, charEnd, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncPathLastSeparator calls `rb_enc_path_last_separator` in C
//
// Original definition is following
//
//	char *rb_enc_path_last_separator(const char *path, const char *end, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/pathname.h
func RbEncPathLastSeparator(path string, end string, enc *RbEncoding) string {
	charPath, cleanCharpath := string2Char(path)
	defer cleanCharpath()

	charEnd, cleanCharend := string2Char(end)
	defer cleanCharend()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_path_last_separator(charPath, charEnd, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncPathNext calls `rb_enc_path_next` in C
//
// Original definition is following
//
//	char *rb_enc_path_next(const char *path, const char *end, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/pathname.h
func RbEncPathNext(path string, end string, enc *RbEncoding) string {
	charPath, cleanCharpath := string2Char(path)
	defer cleanCharpath()

	charEnd, cleanCharend := string2Char(end)
	defer cleanCharend()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_path_next(charPath, charEnd, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncPathSkipPrefix calls `rb_enc_path_skip_prefix` in C
//
// Original definition is following
//
//	char *rb_enc_path_skip_prefix(const char *path, const char *end, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/pathname.h
func RbEncPathSkipPrefix(path string, end string, enc *RbEncoding) string {
	charPath, cleanCharpath := string2Char(path)
	defer cleanCharpath()

	charEnd, cleanCharend := string2Char(end)
	defer cleanCharend()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_path_skip_prefix(charPath, charEnd, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}
