// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbArithmeticSequenceComponentsT is a type for passing `C.rb_arithmetic_sequence_components_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
type RbArithmeticSequenceComponentsT C.rb_arithmetic_sequence_components_t

// RbEnumeratorSizeFunc is a type for passing `C.rb_enumerator_size_func` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
type RbEnumeratorSizeFunc C.rb_enumerator_size_func

// RbArithmeticSequenceBegLenStep calls `rb_arithmetic_sequence_beg_len_step` in C
//
// Original definition is following
//
//	VALUE rb_arithmetic_sequence_beg_len_step(VALUE as, long *begp, long *lenp, long *stepp, long len, int err)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
func RbArithmeticSequenceBegLenStep(as VALUE, begp *Long, lenp *Long, stepp *Long, len Long, err int) VALUE {
	var cBegp C.long
	var cLenp C.long
	var cStepp C.long
	ret := VALUE(C.rb_arithmetic_sequence_beg_len_step(C.VALUE(as), &cBegp, &cLenp, &cStepp, C.long(len), C.int(err)))
	*begp = Long(cBegp)
	*lenp = Long(cLenp)
	*stepp = Long(cStepp)
	return ret
}

// RbArithmeticSequenceExtract calls `rb_arithmetic_sequence_extract` in C
//
// Original definition is following
//
//	int rb_arithmetic_sequence_extract(VALUE as, rb_arithmetic_sequence_components_t *buf)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
func RbArithmeticSequenceExtract(as VALUE, buf *RbArithmeticSequenceComponentsT) int {
	var cBuf C.rb_arithmetic_sequence_components_t
	ret := int(C.rb_arithmetic_sequence_extract(C.VALUE(as), &cBuf))
	*buf = RbArithmeticSequenceComponentsT(cBuf)
	return ret
}

// RbEnumeratorize calls `rb_enumeratorize` in C
//
// Original definition is following
//
//	VALUE rb_enumeratorize(VALUE recv, VALUE meth, int argc, const VALUE *argv)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
func RbEnumeratorize(recv VALUE, meth VALUE, argc int, argv *VALUE) VALUE {
	var cArgv C.VALUE
	ret := VALUE(C.rb_enumeratorize(C.VALUE(recv), C.VALUE(meth), C.int(argc), &cArgv))
	*argv = VALUE(cArgv)
	return ret
}

// RbEnumeratorizeWithSize calls `rb_enumeratorize_with_size` in C
//
// Original definition is following
//
//	VALUE rb_enumeratorize_with_size(VALUE recv, VALUE meth, int argc, const VALUE *argv, rb_enumerator_size_func *func)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
func RbEnumeratorizeWithSize(recv VALUE, meth VALUE, argc int, argv *VALUE, fun *RbEnumeratorSizeFunc) VALUE {
	var cArgv C.VALUE
	var cFun C.rb_enumerator_size_func
	ret := VALUE(C.rb_enumeratorize_with_size(C.VALUE(recv), C.VALUE(meth), C.int(argc), &cArgv, &cFun))
	*argv = VALUE(cArgv)
	*fun = RbEnumeratorSizeFunc(cFun)
	return ret
}

// RbEnumeratorizeWithSizeKw calls `rb_enumeratorize_with_size_kw` in C
//
// Original definition is following
//
//	VALUE rb_enumeratorize_with_size_kw(VALUE recv, VALUE meth, int argc, const VALUE *argv, rb_enumerator_size_func *func, int kw_splat)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/enumerator.h
func RbEnumeratorizeWithSizeKw(recv VALUE, meth VALUE, argc int, argv *VALUE, fun *RbEnumeratorSizeFunc, kw_splat int) VALUE {
	var cArgv C.VALUE
	var cFun C.rb_enumerator_size_func
	ret := VALUE(C.rb_enumeratorize_with_size_kw(C.VALUE(recv), C.VALUE(meth), C.int(argc), &cArgv, &cFun, C.int(kw_splat)))
	*argv = VALUE(cArgv)
	*fun = RbEnumeratorSizeFunc(cFun)
	return ret
}
