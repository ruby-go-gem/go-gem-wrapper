// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbMatchBusy calls `rb_match_busy` in C
//
// Original definition is following
//
//	void rb_match_busy(VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbMatchBusy(md VALUE) {
	C.rb_match_busy(C.VALUE(md))
}

// RbRegAlloc calls `rb_reg_alloc` in C
//
// Original definition is following
//
//	VALUE rb_reg_alloc(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegAlloc() VALUE {
	ret := VALUE(C.rb_reg_alloc())
	return ret
}

// RbRegBackrefNumber calls `rb_reg_backref_number` in C
//
// Original definition is following
//
//	int rb_reg_backref_number(VALUE match, VALUE backref)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegBackrefNumber(match VALUE, backref VALUE) int {
	ret := int(C.rb_reg_backref_number(C.VALUE(match), C.VALUE(backref)))
	return ret
}

// RbRegInitStr calls `rb_reg_init_str` in C
//
// Original definition is following
//
//	VALUE rb_reg_init_str(VALUE re, VALUE s, int options)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegInitStr(re VALUE, s VALUE, options int) VALUE {
	ret := VALUE(C.rb_reg_init_str(C.VALUE(re), C.VALUE(s), C.int(options)))
	return ret
}

// RbRegLastMatch calls `rb_reg_last_match` in C
//
// Original definition is following
//
//	VALUE rb_reg_last_match(VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegLastMatch(md VALUE) VALUE {
	ret := VALUE(C.rb_reg_last_match(C.VALUE(md)))
	return ret
}

// RbRegMatch calls `rb_reg_match` in C
//
// Original definition is following
//
//	VALUE rb_reg_match(VALUE re, VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegMatch(re VALUE, str VALUE) VALUE {
	ret := VALUE(C.rb_reg_match(C.VALUE(re), C.VALUE(str)))
	return ret
}

// RbRegMatch2 calls `rb_reg_match2` in C
//
// Original definition is following
//
//	VALUE rb_reg_match2(VALUE re)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegMatch2(re VALUE) VALUE {
	ret := VALUE(C.rb_reg_match2(C.VALUE(re)))
	return ret
}

// RbRegMatchLast calls `rb_reg_match_last` in C
//
// Original definition is following
//
//	VALUE rb_reg_match_last(VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegMatchLast(md VALUE) VALUE {
	ret := VALUE(C.rb_reg_match_last(C.VALUE(md)))
	return ret
}

// RbRegMatchPost calls `rb_reg_match_post` in C
//
// Original definition is following
//
//	VALUE rb_reg_match_post(VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegMatchPost(md VALUE) VALUE {
	ret := VALUE(C.rb_reg_match_post(C.VALUE(md)))
	return ret
}

// RbRegMatchPre calls `rb_reg_match_pre` in C
//
// Original definition is following
//
//	VALUE rb_reg_match_pre(VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegMatchPre(md VALUE) VALUE {
	ret := VALUE(C.rb_reg_match_pre(C.VALUE(md)))
	return ret
}

// RbRegNew calls `rb_reg_new` in C
//
// Original definition is following
//
//	VALUE rb_reg_new(const char *src, long len, int opts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegNew(src string, len Long, opts int) VALUE {
	char, clean := string2Char(src)
	defer clean()

	ret := VALUE(C.rb_reg_new(char, C.long(len), C.int(opts)))
	return ret
}

// RbRegNewStr calls `rb_reg_new_str` in C
//
// Original definition is following
//
//	VALUE rb_reg_new_str(VALUE src, int opts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegNewStr(src VALUE, opts int) VALUE {
	ret := VALUE(C.rb_reg_new_str(C.VALUE(src), C.int(opts)))
	return ret
}

// RbRegNthDefined calls `rb_reg_nth_defined` in C
//
// Original definition is following
//
//	VALUE rb_reg_nth_defined(int n, VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegNthDefined(n int, md VALUE) VALUE {
	ret := VALUE(C.rb_reg_nth_defined(C.int(n), C.VALUE(md)))
	return ret
}

// RbRegNthMatch calls `rb_reg_nth_match` in C
//
// Original definition is following
//
//	VALUE rb_reg_nth_match(int n, VALUE md)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegNthMatch(n int, md VALUE) VALUE {
	ret := VALUE(C.rb_reg_nth_match(C.int(n), C.VALUE(md)))
	return ret
}

// RbRegOptions calls `rb_reg_options` in C
//
// Original definition is following
//
//	int rb_reg_options(VALUE re)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/re.h
func RbRegOptions(re VALUE) int {
	ret := int(C.rb_reg_options(C.VALUE(re)))
	return ret
}
