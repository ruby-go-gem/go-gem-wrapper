// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbCheckIdCstr calls `rb_check_id_cstr` in C
//
// Original definition is following
//
//	ID rb_check_id_cstr(const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/symbol.h
func RbCheckIdCstr(ptr string, len Long, enc *RbEncoding) ID {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := ID(C.rb_check_id_cstr(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbCheckSymbolCstr calls `rb_check_symbol_cstr` in C
//
// Original definition is following
//
//	VALUE rb_check_symbol_cstr(const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/symbol.h
func RbCheckSymbolCstr(ptr string, len Long, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_check_symbol_cstr(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncSymname2P calls `rb_enc_symname2_p` in C
//
// Original definition is following
//
//	int rb_enc_symname2_p(const char *name, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/symbol.h
func RbEncSymname2P(name string, len Long, enc *RbEncoding) int {
	char, clean := string2Char(name)
	defer clean()

	var cEnc C.rb_encoding
	ret := int(C.rb_enc_symname2_p(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncSymnameP calls `rb_enc_symname_p` in C
//
// Original definition is following
//
//	int rb_enc_symname_p(const char *str, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/symbol.h
func RbEncSymnameP(str string, enc *RbEncoding) int {
	char, clean := string2Char(str)
	defer clean()

	var cEnc C.rb_encoding
	ret := int(C.rb_enc_symname_p(char, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}
