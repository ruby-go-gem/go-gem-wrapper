// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbTimeInterval calls `rb_time_interval` in C
//
// Original definition is following
//
//	struct timeval rb_time_interval(VALUE num)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeInterval(num VALUE) Timeval {
	ret := Timeval(C.rb_time_interval(C.VALUE(num)))
	return ret
}

// RbTimeNanoNew calls `rb_time_nano_new` in C
//
// Original definition is following
//
//	VALUE rb_time_nano_new(time_t sec, long nsec)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeNanoNew(sec TimeT, nsec Long) VALUE {
	ret := VALUE(C.rb_time_nano_new(C.time_t(sec), C.long(nsec)))
	return ret
}

// RbTimeNew calls `rb_time_new` in C
//
// Original definition is following
//
//	VALUE rb_time_new(time_t sec, long usec)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeNew(sec TimeT, usec Long) VALUE {
	ret := VALUE(C.rb_time_new(C.time_t(sec), C.long(usec)))
	return ret
}

// RbTimeNumNew calls `rb_time_num_new` in C
//
// Original definition is following
//
//	VALUE rb_time_num_new(VALUE timev, VALUE off)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeNumNew(timev VALUE, off VALUE) VALUE {
	ret := VALUE(C.rb_time_num_new(C.VALUE(timev), C.VALUE(off)))
	return ret
}

// RbTimeTimespec calls `rb_time_timespec` in C
//
// Original definition is following
//
//	struct timespec rb_time_timespec(VALUE time)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeTimespec(time VALUE) Timespec {
	ret := Timespec(C.rb_time_timespec(C.VALUE(time)))
	return ret
}

// RbTimeTimespecInterval calls `rb_time_timespec_interval` in C
//
// Original definition is following
//
//	struct timespec rb_time_timespec_interval(VALUE num)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeTimespecInterval(num VALUE) Timespec {
	ret := Timespec(C.rb_time_timespec_interval(C.VALUE(num)))
	return ret
}

// RbTimeTimespecNew calls `rb_time_timespec_new` in C
//
// Original definition is following
//
//	VALUE rb_time_timespec_new(const struct timespec *ts, int offset)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeTimespecNew(ts *Timespec, offset int) VALUE {
	var cTs C.timespec
	ret := VALUE(C.rb_time_timespec_new(&cTs, C.int(offset)))
	*ts = Timespec(cTs)
	return ret
}

// RbTimeTimeval calls `rb_time_timeval` in C
//
// Original definition is following
//
//	struct timeval rb_time_timeval(VALUE time)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeTimeval(time VALUE) Timeval {
	ret := Timeval(C.rb_time_timeval(C.VALUE(time)))
	return ret
}

// RbTimeUtcOffset calls `rb_time_utc_offset` in C
//
// Original definition is following
//
//	VALUE rb_time_utc_offset(VALUE time)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimeUtcOffset(time VALUE) VALUE {
	ret := VALUE(C.rb_time_utc_offset(C.VALUE(time)))
	return ret
}

// RbTimespecNow calls `rb_timespec_now` in C
//
// Original definition is following
//
//	void rb_timespec_now(struct timespec *ts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/time.h
func RbTimespecNow(ts *Timespec) {
	var cTs C.timespec
	C.rb_timespec_now(&cTs)
	*ts = Timespec(cTs)
}
