// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbRegAdjustStartpos calls `rb_reg_adjust_startpos` in C
//
// Original definition is following
//
//	long rb_reg_adjust_startpos(VALUE re, VALUE str, long pos, int dir)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegAdjustStartpos(re VALUE, str VALUE, pos Long, dir int) Long {
	ret := Long(C.rb_reg_adjust_startpos(C.VALUE(re), C.VALUE(str), C.long(pos), C.int(dir)))
	return ret
}

// RbRegOnigMatch calls `rb_reg_onig_match` in C
//
// Original definition is following
//
//	OnigPosition rb_reg_onig_match(VALUE re, VALUE str,
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegOnigMatch(re VALUE, str VALUE, arg3 unsafe.Pointer, args unsafe.Pointer, regs *ReRegisters) Onigposition {
	var cRegs C.re_registers
	ret := Onigposition(C.rb_reg_onig_match(C.VALUE(re), C.VALUE(str), toCPointer(arg3), toCPointer(args), &cRegs))
	*regs = ReRegisters(cRegs)
	return ret
}

// RbRegPrepareRe calls `rb_reg_prepare_re` in C
//
// Original definition is following
//
//	regex_t *rb_reg_prepare_re(VALUE re, VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegPrepareRe(re VALUE, str VALUE) *RegexT {
	ret := *RegexT(C.rb_reg_prepare_re(C.VALUE(re), C.VALUE(str)))
	return ret
}

// RbRegQuote calls `rb_reg_quote` in C
//
// Original definition is following
//
//	VALUE rb_reg_quote(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegQuote(str VALUE) VALUE {
	ret := VALUE(C.rb_reg_quote(C.VALUE(str)))
	return ret
}

// RbRegRegionCopy calls `rb_reg_region_copy` in C
//
// Original definition is following
//
//	int rb_reg_region_copy(struct re_registers *dst, const struct re_registers *src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegRegionCopy(dst *ReRegisters, src *ReRegisters) int {
	var cDst C.re_registers
	var cSrc C.re_registers
	ret := int(C.rb_reg_region_copy(&cDst, &cSrc))
	*dst = ReRegisters(cDst)
	*src = ReRegisters(cSrc)
	return ret
}

// RbRegRegsub calls `rb_reg_regsub` in C
//
// Original definition is following
//
//	VALUE rb_reg_regsub(VALUE repl, VALUE src, struct re_registers *regs, VALUE rexp)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegRegsub(repl VALUE, src VALUE, regs *ReRegisters, rexp VALUE) VALUE {
	var cRegs C.re_registers
	ret := VALUE(C.rb_reg_regsub(C.VALUE(repl), C.VALUE(src), &cRegs, C.VALUE(rexp)))
	*regs = ReRegisters(cRegs)
	return ret
}

// RbRegSearch calls `rb_reg_search` in C
//
// Original definition is following
//
//	long rb_reg_search(VALUE re, VALUE str, long pos, int dir)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/re.h
func RbRegSearch(re VALUE, str VALUE, pos Long, dir int) Long {
	ret := Long(C.rb_reg_search(C.VALUE(re), C.VALUE(str), C.long(pos), C.int(dir)))
	return ret
}
