// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbIoBufferClear calls `rb_io_buffer_clear` in C
//
// Original definition is following
//
//	void rb_io_buffer_clear(VALUE self, uint8_t value, size_t offset, size_t length)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferClear(self VALUE, value Uint8T, offset SizeT, length SizeT) {
	C.rb_io_buffer_clear(C.VALUE(self), C.uint8_t(value), C.size_t(offset), C.size_t(length))
}

// RbIoBufferFree calls `rb_io_buffer_free` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_free(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferFree(self VALUE) VALUE {
	ret := VALUE(C.rb_io_buffer_free(C.VALUE(self)))
	return ret
}

// RbIoBufferFreeLocked calls `rb_io_buffer_free_locked` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_free_locked(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferFreeLocked(self VALUE) VALUE {
	ret := VALUE(C.rb_io_buffer_free_locked(C.VALUE(self)))
	return ret
}

// RbIoBufferGetBytes calls `rb_io_buffer_get_bytes` in C
//
// Original definition is following
//
//	enum rb_io_buffer_flags rb_io_buffer_get_bytes(VALUE self, void **base, size_t *size)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferGetBytes(self VALUE, base unsafe.Pointer, size *SizeT) RbIoBufferFlags {
	var cSize C.size_t
	ret := RbIoBufferFlags(C.rb_io_buffer_get_bytes(C.VALUE(self), toCPointer(base), &cSize))
	*size = SizeT(cSize)
	return ret
}

// RbIoBufferGetBytesForReading calls `rb_io_buffer_get_bytes_for_reading` in C
//
// Original definition is following
//
//	void rb_io_buffer_get_bytes_for_reading(VALUE self, const void **base, size_t *size)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferGetBytesForReading(self VALUE, base unsafe.Pointer, size *SizeT) {
	var cSize C.size_t
	C.rb_io_buffer_get_bytes_for_reading(C.VALUE(self), toCPointer(base), &cSize)
	*size = SizeT(cSize)
}

// RbIoBufferGetBytesForWriting calls `rb_io_buffer_get_bytes_for_writing` in C
//
// Original definition is following
//
//	void rb_io_buffer_get_bytes_for_writing(VALUE self, void **base, size_t *size)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferGetBytesForWriting(self VALUE, base unsafe.Pointer, size *SizeT) {
	var cSize C.size_t
	C.rb_io_buffer_get_bytes_for_writing(C.VALUE(self), toCPointer(base), &cSize)
	*size = SizeT(cSize)
}

// RbIoBufferLock calls `rb_io_buffer_lock` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_lock(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferLock(self VALUE) VALUE {
	ret := VALUE(C.rb_io_buffer_lock(C.VALUE(self)))
	return ret
}

// RbIoBufferMap calls `rb_io_buffer_map` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_map(VALUE io, size_t size, rb_off_t offset, enum rb_io_buffer_flags flags)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferMap(io VALUE, size SizeT, offset RbOffT, flags RbIoBufferFlags) VALUE {
	ret := VALUE(C.rb_io_buffer_map(C.VALUE(io), C.size_t(size), C.rb_off_t(offset), C.rb_io_buffer_flags(flags)))
	return ret
}

// RbIoBufferNew calls `rb_io_buffer_new` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_new(void *base, size_t size, enum rb_io_buffer_flags flags)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferNew(base unsafe.Pointer, size SizeT, flags RbIoBufferFlags) VALUE {
	ret := VALUE(C.rb_io_buffer_new(toCPointer(base), C.size_t(size), C.rb_io_buffer_flags(flags)))
	return ret
}

// RbIoBufferPread calls `rb_io_buffer_pread` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_pread(VALUE self, VALUE io, rb_off_t from, size_t length, size_t offset)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferPread(self VALUE, io VALUE, from RbOffT, length SizeT, offset SizeT) VALUE {
	ret := VALUE(C.rb_io_buffer_pread(C.VALUE(self), C.VALUE(io), C.rb_off_t(from), C.size_t(length), C.size_t(offset)))
	return ret
}

// RbIoBufferPwrite calls `rb_io_buffer_pwrite` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_pwrite(VALUE self, VALUE io, rb_off_t from, size_t length, size_t offset)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferPwrite(self VALUE, io VALUE, from RbOffT, length SizeT, offset SizeT) VALUE {
	ret := VALUE(C.rb_io_buffer_pwrite(C.VALUE(self), C.VALUE(io), C.rb_off_t(from), C.size_t(length), C.size_t(offset)))
	return ret
}

// RbIoBufferRead calls `rb_io_buffer_read` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_read(VALUE self, VALUE io, size_t length, size_t offset)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferRead(self VALUE, io VALUE, length SizeT, offset SizeT) VALUE {
	ret := VALUE(C.rb_io_buffer_read(C.VALUE(self), C.VALUE(io), C.size_t(length), C.size_t(offset)))
	return ret
}

// RbIoBufferResize calls `rb_io_buffer_resize` in C
//
// Original definition is following
//
//	void rb_io_buffer_resize(VALUE self, size_t size)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferResize(self VALUE, size SizeT) {
	C.rb_io_buffer_resize(C.VALUE(self), C.size_t(size))
}

// RbIoBufferTransfer calls `rb_io_buffer_transfer` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_transfer(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferTransfer(self VALUE) VALUE {
	ret := VALUE(C.rb_io_buffer_transfer(C.VALUE(self)))
	return ret
}

// RbIoBufferTryUnlock calls `rb_io_buffer_try_unlock` in C
//
// Original definition is following
//
//	int rb_io_buffer_try_unlock(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferTryUnlock(self VALUE) int {
	ret := int(C.rb_io_buffer_try_unlock(C.VALUE(self)))
	return ret
}

// RbIoBufferUnlock calls `rb_io_buffer_unlock` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_unlock(VALUE self)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferUnlock(self VALUE) VALUE {
	ret := VALUE(C.rb_io_buffer_unlock(C.VALUE(self)))
	return ret
}

// RbIoBufferWrite calls `rb_io_buffer_write` in C
//
// Original definition is following
//
//	VALUE rb_io_buffer_write(VALUE self, VALUE io, size_t length, size_t offset)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/io/buffer.h
func RbIoBufferWrite(self VALUE, io VALUE, length SizeT, offset SizeT) VALUE {
	ret := VALUE(C.rb_io_buffer_write(C.VALUE(self), C.VALUE(io), C.size_t(length), C.size_t(offset)))
	return ret
}
