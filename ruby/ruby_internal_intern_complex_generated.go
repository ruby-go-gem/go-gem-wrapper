// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbComplex calls `rb_Complex` in C
//
// Original definition is following
//
//	VALUE rb_Complex(VALUE real, VALUE imag)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplex(real VALUE, imag VALUE) VALUE {
	ret := VALUE(C.rb_Complex(C.VALUE(real), C.VALUE(imag)))
	return ret
}

// RbComplexAbs calls `rb_complex_abs` in C
//
// Original definition is following
//
//	VALUE rb_complex_abs(VALUE z)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexAbs(z VALUE) VALUE {
	ret := VALUE(C.rb_complex_abs(C.VALUE(z)))
	return ret
}

// RbComplexArg calls `rb_complex_arg` in C
//
// Original definition is following
//
//	VALUE rb_complex_arg(VALUE z)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexArg(z VALUE) VALUE {
	ret := VALUE(C.rb_complex_arg(C.VALUE(z)))
	return ret
}

// RbComplexConjugate calls `rb_complex_conjugate` in C
//
// Original definition is following
//
//	VALUE rb_complex_conjugate(VALUE z)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexConjugate(z VALUE) VALUE {
	ret := VALUE(C.rb_complex_conjugate(C.VALUE(z)))
	return ret
}

// RbComplexDiv calls `rb_complex_div` in C
//
// Original definition is following
//
//	VALUE rb_complex_div(VALUE x, VALUE y)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexDiv(x VALUE, y VALUE) VALUE {
	ret := VALUE(C.rb_complex_div(C.VALUE(x), C.VALUE(y)))
	return ret
}

// RbComplexMinus calls `rb_complex_minus` in C
//
// Original definition is following
//
//	VALUE rb_complex_minus(VALUE x, VALUE y)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexMinus(x VALUE, y VALUE) VALUE {
	ret := VALUE(C.rb_complex_minus(C.VALUE(x), C.VALUE(y)))
	return ret
}

// RbComplexMul calls `rb_complex_mul` in C
//
// Original definition is following
//
//	VALUE rb_complex_mul(VALUE x, VALUE y)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexMul(x VALUE, y VALUE) VALUE {
	ret := VALUE(C.rb_complex_mul(C.VALUE(x), C.VALUE(y)))
	return ret
}

// RbComplexNew calls `rb_complex_new` in C
//
// Original definition is following
//
//	VALUE rb_complex_new(VALUE real, VALUE imag)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexNew(real VALUE, imag VALUE) VALUE {
	ret := VALUE(C.rb_complex_new(C.VALUE(real), C.VALUE(imag)))
	return ret
}

// RbComplexNewPolar calls `rb_complex_new_polar` in C
//
// Original definition is following
//
//	VALUE rb_complex_new_polar(VALUE abs, VALUE arg)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexNewPolar(abs VALUE, arg VALUE) VALUE {
	ret := VALUE(C.rb_complex_new_polar(C.VALUE(abs), C.VALUE(arg)))
	return ret
}

// RbComplexPlus calls `rb_complex_plus` in C
//
// Original definition is following
//
//	VALUE rb_complex_plus(VALUE x, VALUE y)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexPlus(x VALUE, y VALUE) VALUE {
	ret := VALUE(C.rb_complex_plus(C.VALUE(x), C.VALUE(y)))
	return ret
}

// RbComplexPow calls `rb_complex_pow` in C
//
// Original definition is following
//
//	VALUE rb_complex_pow(VALUE base, VALUE exp)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexPow(base VALUE, exp VALUE) VALUE {
	ret := VALUE(C.rb_complex_pow(C.VALUE(base), C.VALUE(exp)))
	return ret
}

// RbComplexUminus calls `rb_complex_uminus` in C
//
// Original definition is following
//
//	VALUE rb_complex_uminus(VALUE z)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbComplexUminus(z VALUE) VALUE {
	ret := VALUE(C.rb_complex_uminus(C.VALUE(z)))
	return ret
}

// RbDblComplexNew calls `rb_dbl_complex_new` in C
//
// Original definition is following
//
//	VALUE rb_dbl_complex_new(double real, double imag)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/complex.h
func RbDblComplexNew(real Double, imag Double) VALUE {
	ret := VALUE(C.rb_dbl_complex_new(C.double(real), C.double(imag)))
	return ret
}
