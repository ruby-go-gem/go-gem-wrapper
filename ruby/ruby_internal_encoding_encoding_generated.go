// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbEncoding is a type for passing `C.rb_encoding` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
type RbEncoding C.rb_encoding

// RbDefaultExternalEncoding calls `rb_default_external_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_default_external_encoding(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbDefaultExternalEncoding() *RbEncoding {
	ret := *RbEncoding(C.rb_default_external_encoding())
	return ret
}

// RbDefaultInternalEncoding calls `rb_default_internal_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_default_internal_encoding(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbDefaultInternalEncoding() *RbEncoding {
	ret := *RbEncoding(C.rb_default_internal_encoding())
	return ret
}

// RbDefineDummyEncoding calls `rb_define_dummy_encoding` in C
//
// Original definition is following
//
//	int rb_define_dummy_encoding(const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbDefineDummyEncoding(name string) int {
	char, clean := string2Char(name)
	defer clean()

	ret := int(C.rb_define_dummy_encoding(char))
	return ret
}

// RbEncAlias calls `rb_enc_alias` in C
//
// Original definition is following
//
//	int rb_enc_alias(const char *alias, const char *orig)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAlias(alias string, orig string) int {
	charAlias, cleanCharalias := string2Char(alias)
	defer cleanCharalias()

	charOrig, cleanCharorig := string2Char(orig)
	defer cleanCharorig()

	ret := int(C.rb_enc_alias(charAlias, charOrig))
	return ret
}

// RbEncAscget calls `rb_enc_ascget` in C
//
// Original definition is following
//
//	int rb_enc_ascget(const char *p, const char *e, int *len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAscget(p string, e string, len *int, enc *RbEncoding) int {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cLen C.int
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_ascget(charP, charE, &cLen, &cEnc))
	*len = int(cLen)
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncAssociate calls `rb_enc_associate` in C
//
// Original definition is following
//
//	VALUE rb_enc_associate(VALUE obj, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAssociate(obj VALUE, enc *RbEncoding) VALUE {
	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_associate(C.VALUE(obj), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncAssociateIndex calls `rb_enc_associate_index` in C
//
// Original definition is following
//
//	VALUE rb_enc_associate_index(VALUE obj, int encindex)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAssociateIndex(obj VALUE, encindex int) VALUE {
	ret := VALUE(C.rb_enc_associate_index(C.VALUE(obj), C.int(encindex)))
	return ret
}

// RbEncCheck calls `rb_enc_check` in C
//
// Original definition is following
//
//	rb_encoding *rb_enc_check(VALUE str1,VALUE str2)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCheck(str1 VALUE, str2 VALUE) *RbEncoding {
	ret := *RbEncoding(C.rb_enc_check(C.VALUE(str1), C.VALUE(str2)))
	return ret
}

// RbEncCodelen calls `rb_enc_codelen` in C
//
// Original definition is following
//
//	int rb_enc_codelen(int code, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCodelen(code int, enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_codelen(C.int(code), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncCodepointLen calls `rb_enc_codepoint_len` in C
//
// Original definition is following
//
//	unsigned int rb_enc_codepoint_len(const char *p, const char *e, int *len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCodepointLen(p string, e string, len *int, enc *RbEncoding) uint {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cLen C.int
	var cEnc C.rb_encoding
	ret := uint(C.rb_enc_codepoint_len(charP, charE, &cLen, &cEnc))
	*len = int(cLen)
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncCompatible calls `rb_enc_compatible` in C
//
// Original definition is following
//
//	rb_encoding *rb_enc_compatible(VALUE str1, VALUE str2)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCompatible(str1 VALUE, str2 VALUE) *RbEncoding {
	ret := *RbEncoding(C.rb_enc_compatible(C.VALUE(str1), C.VALUE(str2)))
	return ret
}

// RbEncCopy calls `rb_enc_copy` in C
//
// Original definition is following
//
//	void rb_enc_copy(VALUE dst, VALUE src)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCopy(dst VALUE, src VALUE) {
	C.rb_enc_copy(C.VALUE(dst), C.VALUE(src))
}

// RbEncDefaultExternal calls `rb_enc_default_external` in C
//
// Original definition is following
//
//	VALUE rb_enc_default_external(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncDefaultExternal() VALUE {
	ret := VALUE(C.rb_enc_default_external())
	return ret
}

// RbEncDefaultInternal calls `rb_enc_default_internal` in C
//
// Original definition is following
//
//	VALUE rb_enc_default_internal(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncDefaultInternal() VALUE {
	ret := VALUE(C.rb_enc_default_internal())
	return ret
}

// RbEncFastMbclen calls `rb_enc_fast_mbclen` in C
//
// Original definition is following
//
//	int rb_enc_fast_mbclen(const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncFastMbclen(p string, e string, enc *RbEncoding) int {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := int(C.rb_enc_fast_mbclen(charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncFind calls `rb_enc_find` in C
//
// Original definition is following
//
//	rb_encoding *rb_enc_find(const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncFind(name string) *RbEncoding {
	char, clean := string2Char(name)
	defer clean()

	ret := *RbEncoding(C.rb_enc_find(char))
	return ret
}

// RbEncFindIndex calls `rb_enc_find_index` in C
//
// Original definition is following
//
//	int rb_enc_find_index(const char *name)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncFindIndex(name string) int {
	char, clean := string2Char(name)
	defer clean()

	ret := int(C.rb_enc_find_index(char))
	return ret
}

// RbEncFromEncoding calls `rb_enc_from_encoding` in C
//
// Original definition is following
//
//	VALUE rb_enc_from_encoding(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncFromEncoding(enc *RbEncoding) VALUE {
	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_from_encoding(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncFromIndex calls `rb_enc_from_index` in C
//
// Original definition is following
//
//	rb_encoding *rb_enc_from_index(int idx)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncFromIndex(idx int) *RbEncoding {
	ret := *RbEncoding(C.rb_enc_from_index(C.int(idx)))
	return ret
}

// RbEncGet calls `rb_enc_get` in C
//
// Original definition is following
//
//	rb_encoding *rb_enc_get(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncGet(obj VALUE) *RbEncoding {
	ret := *RbEncoding(C.rb_enc_get(C.VALUE(obj)))
	return ret
}

// RbEncGetIndex calls `rb_enc_get_index` in C
//
// Original definition is following
//
//	int rb_enc_get_index(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncGetIndex(obj VALUE) int {
	ret := int(C.rb_enc_get_index(C.VALUE(obj)))
	return ret
}

// RbEncMbclen calls `rb_enc_mbclen` in C
//
// Original definition is following
//
//	int rb_enc_mbclen(const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncMbclen(p string, e string, enc *RbEncoding) int {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := int(C.rb_enc_mbclen(charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncPreciseMbclen calls `rb_enc_precise_mbclen` in C
//
// Original definition is following
//
//	int rb_enc_precise_mbclen(const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncPreciseMbclen(p string, e string, enc *RbEncoding) int {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := int(C.rb_enc_precise_mbclen(charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncSetDefaultExternal calls `rb_enc_set_default_external` in C
//
// Original definition is following
//
//	void rb_enc_set_default_external(VALUE encoding)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncSetDefaultExternal(encoding VALUE) {
	C.rb_enc_set_default_external(C.VALUE(encoding))
}

// RbEncSetDefaultInternal calls `rb_enc_set_default_internal` in C
//
// Original definition is following
//
//	void rb_enc_set_default_internal(VALUE encoding)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncSetDefaultInternal(encoding VALUE) {
	C.rb_enc_set_default_internal(C.VALUE(encoding))
}

// RbEncSetIndex calls `rb_enc_set_index` in C
//
// Original definition is following
//
//	void rb_enc_set_index(VALUE obj, int encindex)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncSetIndex(obj VALUE, encindex int) {
	C.rb_enc_set_index(C.VALUE(obj), C.int(encindex))
}

// RbFilesystemEncindex calls `rb_filesystem_encindex` in C
//
// Original definition is following
//
//	int rb_filesystem_encindex(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbFilesystemEncindex() int {
	ret := int(C.rb_filesystem_encindex())
	return ret
}

// RbFilesystemEncoding calls `rb_filesystem_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_filesystem_encoding(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbFilesystemEncoding() *RbEncoding {
	ret := *RbEncoding(C.rb_filesystem_encoding())
	return ret
}

// RbFindEncoding calls `rb_find_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_find_encoding(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbFindEncoding(obj VALUE) *RbEncoding {
	ret := *RbEncoding(C.rb_find_encoding(C.VALUE(obj)))
	return ret
}

// RbLocaleCharmap calls `rb_locale_charmap` in C
//
// Original definition is following
//
//	VALUE rb_locale_charmap(VALUE klass)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbLocaleCharmap(klass VALUE) VALUE {
	ret := VALUE(C.rb_locale_charmap(C.VALUE(klass)))
	return ret
}

// RbLocaleEncindex calls `rb_locale_encindex` in C
//
// Original definition is following
//
//	int rb_locale_encindex(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbLocaleEncindex() int {
	ret := int(C.rb_locale_encindex())
	return ret
}

// RbLocaleEncoding calls `rb_locale_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_locale_encoding(void)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbLocaleEncoding() *RbEncoding {
	ret := *RbEncoding(C.rb_locale_encoding())
	return ret
}

// RbToEncoding calls `rb_to_encoding` in C
//
// Original definition is following
//
//	rb_encoding *rb_to_encoding(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbToEncoding(obj VALUE) *RbEncoding {
	ret := *RbEncoding(C.rb_to_encoding(C.VALUE(obj)))
	return ret
}

// RbToEncodingIndex calls `rb_to_encoding_index` in C
//
// Original definition is following
//
//	int rb_to_encoding_index(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbToEncodingIndex(obj VALUE) int {
	ret := int(C.rb_to_encoding_index(C.VALUE(obj)))
	return ret
}

// RbEncodingCoderangeSet calls `RB_ENCODING_CODERANGE_SET` in C
//
// Original definition is following
//
//	RB_ENCODING_CODERANGE_SET(VALUE obj, int encindex, enum ruby_coderange_type cr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingCoderangeSet(obj VALUE, encindex int, cr RubyCoderangeType) {
	C.RB_ENCODING_CODERANGE_SET(C.VALUE(obj), C.int(encindex), C.ruby_coderange_type(cr))
}

// RbEncodingGet calls `RB_ENCODING_GET` in C
//
// Original definition is following
//
//	RB_ENCODING_GET(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingGet(obj VALUE) int {
	ret := int(C.RB_ENCODING_GET(C.VALUE(obj)))
	return ret
}

// RbEncodingGetInlined calls `RB_ENCODING_GET_INLINED` in C
//
// Original definition is following
//
//	RB_ENCODING_GET_INLINED(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingGetInlined(obj VALUE) int {
	ret := int(C.RB_ENCODING_GET_INLINED(C.VALUE(obj)))
	return ret
}

// RbEncodingIsAscii8Bit calls `RB_ENCODING_IS_ASCII8BIT` in C
//
// Original definition is following
//
//	RB_ENCODING_IS_ASCII8BIT(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingIsAscii8Bit(obj VALUE) Bool {
	ret := Bool(C.RB_ENCODING_IS_ASCII8BIT(C.VALUE(obj)))
	return ret
}

// RbEncodingSet calls `RB_ENCODING_SET` in C
//
// Original definition is following
//
//	RB_ENCODING_SET(VALUE obj, int encindex)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingSet(obj VALUE, encindex int) {
	C.RB_ENCODING_SET(C.VALUE(obj), C.int(encindex))
}

// RbEncodingSetInlined calls `RB_ENCODING_SET_INLINED` in C
//
// Original definition is following
//
//	RB_ENCODING_SET_INLINED(VALUE obj, int encindex)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncodingSetInlined(obj VALUE, encindex int) {
	C.RB_ENCODING_SET_INLINED(C.VALUE(obj), C.int(encindex))
}

// RbEncAsciicompat calls `rb_enc_asciicompat` in C
//
// Original definition is following
//
//	rb_enc_asciicompat(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAsciicompat(enc *RbEncoding) Bool {
	var cEnc C.rb_encoding
	ret := Bool(C.rb_enc_asciicompat(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncAsciicompatInline calls `rb_enc_asciicompat_inline` in C
//
// Original definition is following
//
//	rb_enc_asciicompat_inline(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncAsciicompatInline(enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_asciicompat_inline(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncCodeToMbclen calls `rb_enc_code_to_mbclen` in C
//
// Original definition is following
//
//	rb_enc_code_to_mbclen(int c, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCodeToMbclen(c int, enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_code_to_mbclen(C.int(c), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncCodepoint calls `rb_enc_codepoint` in C
//
// Original definition is following
//
//	rb_enc_codepoint(const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncCodepoint(p string, e string, enc *RbEncoding) uint {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := uint(C.rb_enc_codepoint(charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncLeftCharHead calls `rb_enc_left_char_head` in C
//
// Original definition is following
//
//	rb_enc_left_char_head(const char *s, const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncLeftCharHead(s string, p string, e string, enc *RbEncoding) string {
	charS, cleanChars := string2Char(s)
	defer cleanChars()

	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_left_char_head(charS, charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncMbcToCodepoint calls `rb_enc_mbc_to_codepoint` in C
//
// Original definition is following
//
//	rb_enc_mbc_to_codepoint(const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncMbcToCodepoint(p string, e string, enc *RbEncoding) Onigcodepoint {
	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := Onigcodepoint(C.rb_enc_mbc_to_codepoint(charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncMbcput calls `rb_enc_mbcput` in C
//
// Original definition is following
//
//	rb_enc_mbcput(unsigned int c, void *buf, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncMbcput(c uint, buf unsafe.Pointer, enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_mbcput(C.uint(c), toCPointer(buf), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncMbmaxlen calls `rb_enc_mbmaxlen` in C
//
// Original definition is following
//
//	rb_enc_mbmaxlen(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncMbmaxlen(enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_mbmaxlen(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncMbminlen calls `rb_enc_mbminlen` in C
//
// Original definition is following
//
//	rb_enc_mbminlen(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncMbminlen(enc *RbEncoding) int {
	var cEnc C.rb_encoding
	ret := int(C.rb_enc_mbminlen(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncName calls `rb_enc_name` in C
//
// Original definition is following
//
//	rb_enc_name(rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncName(enc *RbEncoding) string {
	var cEnc C.rb_encoding
	ret := string(C.rb_enc_name(&cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncPrevChar calls `rb_enc_prev_char` in C
//
// Original definition is following
//
//	rb_enc_prev_char(const char *s, const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncPrevChar(s string, p string, e string, enc *RbEncoding) string {
	charS, cleanChars := string2Char(s)
	defer cleanChars()

	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_prev_char(charS, charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncRightCharHead calls `rb_enc_right_char_head` in C
//
// Original definition is following
//
//	rb_enc_right_char_head(const char *s, const char *p, const char *e, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncRightCharHead(s string, p string, e string, enc *RbEncoding) string {
	charS, cleanChars := string2Char(s)
	defer cleanChars()

	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_right_char_head(charS, charP, charE, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStepBack calls `rb_enc_step_back` in C
//
// Original definition is following
//
//	rb_enc_step_back(const char *s, const char *p, const char *e, int n, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncStepBack(s string, p string, e string, n int, enc *RbEncoding) string {
	charS, cleanChars := string2Char(s)
	defer cleanChars()

	charP, cleanCharp := string2Char(p)
	defer cleanCharp()

	charE, cleanChare := string2Char(e)
	defer cleanChare()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_step_back(charS, charP, charE, C.int(n), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStrAsciicompatP calls `rb_enc_str_asciicompat_p` in C
//
// Original definition is following
//
//	rb_enc_str_asciicompat_p(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/encoding.h
func RbEncStrAsciicompatP(str VALUE) Bool {
	ret := Bool(C.rb_enc_str_asciicompat_p(C.VALUE(str)))
	return ret
}
