// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

// RbAtomicT is a type for passing `C.rb_atomic_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/atomic.h
type RbAtomicT C.rb_atomic_t

// RbW32AtomicCas calls `rb_w32_atomic_cas` in C
//
// Original definition is following
//
//	rb_w32_atomic_cas(volatile rb_atomic_t *var, rb_atomic_t oldval, rb_atomic_t newval)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/atomic.h
func RbW32AtomicCas(v *RbAtomicT, oldval RbAtomicT, newval RbAtomicT) RbAtomicT {
	var cV C.rb_atomic_t
	ret := RbAtomicT(C.rb_w32_atomic_cas(&cV, C.rb_atomic_t(oldval), C.rb_atomic_t(newval)))
	*v = RbAtomicT(cV)
	return ret
}

// RbW32AtomicOr calls `rb_w32_atomic_or` in C
//
// Original definition is following
//
//	rb_w32_atomic_or(volatile rb_atomic_t *var, rb_atomic_t val)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/atomic.h
func RbW32AtomicOr(v *RbAtomicT, val RbAtomicT) RbAtomicT {
	var cV C.rb_atomic_t
	ret := RbAtomicT(C.rb_w32_atomic_or(&cV, C.rb_atomic_t(val)))
	*v = RbAtomicT(cV)
	return ret
}
