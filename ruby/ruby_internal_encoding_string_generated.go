// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbEncInternedStr calls `rb_enc_interned_str` in C
//
// Original definition is following
//
//	VALUE rb_enc_interned_str(const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncInternedStr(ptr string, len Long, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_interned_str(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncInternedStrCstr calls `rb_enc_interned_str_cstr` in C
//
// Original definition is following
//
//	VALUE rb_enc_interned_str_cstr(const char *ptr, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncInternedStrCstr(ptr string, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_interned_str_cstr(char, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncNth calls `rb_enc_nth` in C
//
// Original definition is following
//
//	char *rb_enc_nth(const char *head, const char *tail, long nth, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncNth(head string, tail string, nth Long, enc *RbEncoding) string {
	charHead, cleanCharhead := string2Char(head)
	defer cleanCharhead()

	charTail, cleanChartail := string2Char(tail)
	defer cleanChartail()

	var cEnc C.rb_encoding
	ret := string(C.rb_enc_nth(charHead, charTail, C.long(nth), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStrAsciionlyP calls `rb_enc_str_asciionly_p` in C
//
// Original definition is following
//
//	int rb_enc_str_asciionly_p(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrAsciionlyP(str VALUE) int {
	ret := int(C.rb_enc_str_asciionly_p(C.VALUE(str)))
	return ret
}

// RbEncStrBufCat calls `rb_enc_str_buf_cat` in C
//
// Original definition is following
//
//	VALUE rb_enc_str_buf_cat(VALUE str, const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrBufCat(str VALUE, ptr string, len Long, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_str_buf_cat(C.VALUE(str), char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStrCoderange calls `rb_enc_str_coderange` in C
//
// Original definition is following
//
//	int rb_enc_str_coderange(VALUE str)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrCoderange(str VALUE) int {
	ret := int(C.rb_enc_str_coderange(C.VALUE(str)))
	return ret
}

// RbEncStrNewCstr calls `rb_enc_str_new_cstr` in C
//
// Original definition is following
//
//	VALUE rb_enc_str_new_cstr(const char *ptr, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrNewCstr(ptr string, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_str_new_cstr(char, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStrNewStatic calls `rb_enc_str_new_static` in C
//
// Original definition is following
//
//	VALUE rb_enc_str_new_static(const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrNewStatic(ptr string, len Long, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_str_new_static(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncStrlen calls `rb_enc_strlen` in C
//
// Original definition is following
//
//	long rb_enc_strlen(const char *head, const char *tail, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncStrlen(head string, tail string, enc *RbEncoding) Long {
	charHead, cleanCharhead := string2Char(head)
	defer cleanCharhead()

	charTail, cleanChartail := string2Char(tail)
	defer cleanChartail()

	var cEnc C.rb_encoding
	ret := Long(C.rb_enc_strlen(charHead, charTail, &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbEncUintChr calls `rb_enc_uint_chr` in C
//
// Original definition is following
//
//	VALUE rb_enc_uint_chr(unsigned int code, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbEncUintChr(code uint, enc *RbEncoding) VALUE {
	var cEnc C.rb_encoding
	ret := VALUE(C.rb_enc_uint_chr(C.uint(code), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbExternalStrNewWithEnc calls `rb_external_str_new_with_enc` in C
//
// Original definition is following
//
//	VALUE rb_external_str_new_with_enc(const char *ptr, long len, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbExternalStrNewWithEnc(ptr string, len Long, enc *RbEncoding) VALUE {
	char, clean := string2Char(ptr)
	defer clean()

	var cEnc C.rb_encoding
	ret := VALUE(C.rb_external_str_new_with_enc(char, C.long(len), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbMemsearch calls `rb_memsearch` in C
//
// Original definition is following
//
//	long rb_memsearch(const void *x, long m, const void *y, long n, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbMemsearch(x unsafe.Pointer, m Long, y unsafe.Pointer, n Long, enc *RbEncoding) Long {
	var cEnc C.rb_encoding
	ret := Long(C.rb_memsearch(toCPointer(x), C.long(m), toCPointer(y), C.long(n), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}

// RbObjEncoding calls `rb_obj_encoding` in C
//
// Original definition is following
//
//	VALUE rb_obj_encoding(VALUE obj)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbObjEncoding(obj VALUE) VALUE {
	ret := VALUE(C.rb_obj_encoding(C.VALUE(obj)))
	return ret
}

// RbStrCoderangeScanRestartable calls `rb_str_coderange_scan_restartable` in C
//
// Original definition is following
//
//	long rb_str_coderange_scan_restartable(const char *str, const char *end, rb_encoding *enc, int *cr)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbStrCoderangeScanRestartable(str string, end string, enc *RbEncoding, cr *int) Long {
	charStr, cleanCharstr := string2Char(str)
	defer cleanCharstr()

	charEnd, cleanCharend := string2Char(end)
	defer cleanCharend()

	var cEnc C.rb_encoding
	var cCr C.int
	ret := Long(C.rb_str_coderange_scan_restartable(charStr, charEnd, &cEnc, &cCr))
	*enc = RbEncoding(cEnc)
	*cr = int(cCr)
	return ret
}

// RbStrConvEnc calls `rb_str_conv_enc` in C
//
// Original definition is following
//
//	VALUE rb_str_conv_enc(VALUE str, rb_encoding *from, rb_encoding *to)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbStrConvEnc(str VALUE, from *RbEncoding, to *RbEncoding) VALUE {
	var cFrom C.rb_encoding
	var cTo C.rb_encoding
	ret := VALUE(C.rb_str_conv_enc(C.VALUE(str), &cFrom, &cTo))
	*from = RbEncoding(cFrom)
	*to = RbEncoding(cTo)
	return ret
}

// RbStrConvEncOpts calls `rb_str_conv_enc_opts` in C
//
// Original definition is following
//
//	VALUE rb_str_conv_enc_opts(VALUE str, rb_encoding *from, rb_encoding *to, int ecflags, VALUE ecopts)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbStrConvEncOpts(str VALUE, from *RbEncoding, to *RbEncoding, ecflags int, ecopts VALUE) VALUE {
	var cFrom C.rb_encoding
	var cTo C.rb_encoding
	ret := VALUE(C.rb_str_conv_enc_opts(C.VALUE(str), &cFrom, &cTo, C.int(ecflags), C.VALUE(ecopts)))
	*from = RbEncoding(cFrom)
	*to = RbEncoding(cTo)
	return ret
}

// RbStrExportToEnc calls `rb_str_export_to_enc` in C
//
// Original definition is following
//
//	VALUE rb_str_export_to_enc(VALUE obj, rb_encoding *enc)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/encoding/string.h
func RbStrExportToEnc(obj VALUE, enc *RbEncoding) VALUE {
	var cEnc C.rb_encoding
	ret := VALUE(C.rb_str_export_to_enc(C.VALUE(obj), &cEnc))
	*enc = RbEncoding(cEnc)
	return ret
}
