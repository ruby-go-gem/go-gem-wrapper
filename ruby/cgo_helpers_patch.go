package ruby

/*
#include "ruby.h"
#include <stdlib.h>
#include "cgo_helpers.h"
*/
import "C"

import (
	"runtime"
	"unsafe"
)

// FIXME: Following cannot be successfully auto-generated by c-for-go...

func (v VALUE) PassRef() (*[0]byte, *cgoAllocMap) {
	ref := (*[0]byte)(unsafe.Pointer(&v))
	return ref, cgoAllocsUnknown
}

// FIXME: Monkey patched from C `VALUE(*func)(ANYARGS)` argument to Go `unsafe.Pointer` argument

// RbDefineSingletonMethod function as declared in https://github.com/ruby/ruby/blob/master/include/ruby/internal/intern/class.h
func RbDefineSingletonMethod(obj VALUE, mid string, _func unsafe.Pointer, arity int32) {
	cobj, cobjAllocMap := (C.VALUE)(obj), cgoAllocsUnknown
	mid = safeString(mid)
	cmid, cmidAllocMap := unpackPCharString(mid)
	carity, carityAllocMap := (C.int)(arity), cgoAllocsUnknown
	C.rb_define_singleton_method(cobj, cmid, toFunctionPointer(_func), carity)
	runtime.KeepAlive(carityAllocMap)
	runtime.KeepAlive(mid)
	runtime.KeepAlive(cmidAllocMap)
	runtime.KeepAlive(cobjAllocMap)
}

// RbDefineModuleFunction function as declared in https://github.com/ruby/ruby/blob/master/include/ruby/internal/method.h
func RbDefineModuleFunction(klass VALUE, mid string, _func unsafe.Pointer, arity int32) {
	cklass, cklassAllocMap := (C.VALUE)(klass), cgoAllocsUnknown
	mid = safeString(mid)
	cmid, cmidAllocMap := unpackPCharString(mid)
	carity, carityAllocMap := (C.int)(arity), cgoAllocsUnknown
	C.rb_define_module_function(cklass, cmid, toFunctionPointer(_func), carity)
	runtime.KeepAlive(carityAllocMap)
	runtime.KeepAlive(mid)
	runtime.KeepAlive(cmidAllocMap)
	runtime.KeepAlive(cklassAllocMap)
}
