// THE AUTOGENERATED LICENSE. ALL THE RIGHTS ARE RESERVED BY ROBOTS.

// WARNING: This file has automatically been generated
// Code generated by ruby_h_to_go. DO NOT EDIT.

package ruby

/*
#include "ruby.h"
*/
import "C"

import (
	"unsafe"
)

// RbDataTypeT is a type for passing `C.rb_data_type_t` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
type RbDataTypeT C.rb_data_type_t

// RbDataTypeStruct is a type for passing `C.rb_data_type_struct` in and out of package
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
type RbDataTypeStruct C.rb_data_type_struct

// RbCheckTypeddata calls `rb_check_typeddata` in C
//
// Original definition is following
//
//	void *rb_check_typeddata(VALUE obj, const rb_data_type_t *data_type)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbCheckTypeddata(obj VALUE, data_type *RbDataTypeT) unsafe.Pointer {
	var cDataType C.rb_data_type_t
	ret := unsafe.Pointer(C.rb_check_typeddata(C.VALUE(obj), &cDataType))
	*data_type = RbDataTypeT(cDataType)
	return ret
}

// RbDataTypedObjectWrap calls `rb_data_typed_object_wrap` in C
//
// Original definition is following
//
//	VALUE rb_data_typed_object_wrap(VALUE klass, void *datap, const rb_data_type_t *type)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbDataTypedObjectWrap(klass VALUE, datap unsafe.Pointer, r *RbDataTypeT) VALUE {
	var cR C.rb_data_type_t
	ret := VALUE(C.rb_data_typed_object_wrap(C.VALUE(klass), toCPointer(datap), &cR))
	*r = RbDataTypeT(cR)
	return ret
}

// RbDataTypedObjectZalloc calls `rb_data_typed_object_zalloc` in C
//
// Original definition is following
//
//	VALUE rb_data_typed_object_zalloc(VALUE klass, size_t size, const rb_data_type_t *type)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbDataTypedObjectZalloc(klass VALUE, size SizeT, r *RbDataTypeT) VALUE {
	var cR C.rb_data_type_t
	ret := VALUE(C.rb_data_typed_object_zalloc(C.VALUE(klass), C.size_t(size), &cR))
	*r = RbDataTypeT(cR)
	return ret
}

// RbTypeddataInheritedP calls `rb_typeddata_inherited_p` in C
//
// Original definition is following
//
//	int rb_typeddata_inherited_p(const rb_data_type_t *child, const rb_data_type_t *parent)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbTypeddataInheritedP(child *RbDataTypeT, parent *RbDataTypeT) int {
	var cChild C.rb_data_type_t
	var cParent C.rb_data_type_t
	ret := int(C.rb_typeddata_inherited_p(&cChild, &cParent))
	*child = RbDataTypeT(cChild)
	*parent = RbDataTypeT(cParent)
	return ret
}

// RbTypeddataIsKindOf calls `rb_typeddata_is_kind_of` in C
//
// Original definition is following
//
//	int rb_typeddata_is_kind_of(VALUE obj, const rb_data_type_t *data_type)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbTypeddataIsKindOf(obj VALUE, data_type *RbDataTypeT) int {
	var cDataType C.rb_data_type_t
	ret := int(C.rb_typeddata_is_kind_of(C.VALUE(obj), &cDataType))
	*data_type = RbDataTypeT(cDataType)
	return ret
}

// RbDataTypedObjectMake calls `rb_data_typed_object_make` in C
//
// Original definition is following
//
//	rb_data_typed_object_make(VALUE klass, const rb_data_type_t *type, void **datap, size_t size)
//
// ref. https://github.com/ruby/ruby/blob/master/include/ruby/internal/core/rtypeddata.h
func RbDataTypedObjectMake(klass VALUE, r *RbDataTypeT, datap unsafe.Pointer, size SizeT) VALUE {
	var cR C.rb_data_type_t
	ret := VALUE(C.rb_data_typed_object_make(C.VALUE(klass), &cR, toCPointer(datap), C.size_t(size)))
	*r = RbDataTypeT(cR)
	return ret
}
